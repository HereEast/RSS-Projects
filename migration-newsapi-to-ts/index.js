(()=>{"use strict";var n={767:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(15),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=JetBrains+Mono:wght@300;400;500;600;700&display=swap);"]),a.push([n.id,':root {\n  --black: #17181c;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  width: 100%;\n  min-height: 100vh;\n  height: 100%;\n  color: #fff;\n  background: var(--black);\n  font-family: "Inter", sans-serif;\n  font-family: "JetBrains Mono", monospace;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  padding: 10px 20px;\n  background-color: var(--black);\n  z-index: 100;\n}\n\nheader h1 {\n  font-size: 32px;\n  font-weight: 800;\n}\n\nfooter {\n  width: 100%;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  color: #fff;\n}\n\nfooter .copyright {\n  font-size: 14px;\n  color: inherit;\n  text-align: right;\n}\n\nfooter .copyright a {\n  display: inline-block;\n  color: inherit;\n  text-decoration: none;\n  transform: translateY(0);\n\n  transition: all 0.4s ease-in-out;\n  cursor: pointer;\n}\n\nfooter .copyright a:hover {\n  color: inherit;\n  opacity: 0.4;\n  transform: translateY(-0.25em);\n}\n\nfooter .copyright:before {\n  content: "© ";\n}\n\nmain {\n  position: relative;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  padding: 60px 20px;\n  flex: 1;\n}\n\n/* SOURCES */\n\n.sources {\n  position: fixed;\n  width: 30vw;\n  height: 100vh;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: flex-start;\n  gap: 2px;\n  padding: 20px 0 180px;\n\n  font-family: "JetBrains Mono", monospace;\n}\n\n.source__item {\n  font: inherit;\n  line-height: 1;\n  color: #fff;\n\n  transition: all 0.4s ease-in-out;\n  cursor: pointer;\n}\n\n.source__item:hover,\n.source__item:focus {\n  opacity: 0.4;\n  transform: translateY(-0.25em);\n}\n\n.active {\n  color: red;\n}\n\n.source__item.active:hover,\n.source__item.active:focus {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n/* NEWS */\n\n.news {\n  padding: 20px 0;\n  width: 70vw;\n  position: relative;\n  margin-left: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.news__item {\n  /* max-width: 900px; */\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n\n  color: var(--black);\n  font-family: "Inter", monospace;\n  line-height: 1.2;\n\n  background: #fff;\n  border: 2px solid var(--black);\n  border-radius: 0;\n  overflow: hidden;\n\n  transition: border 0.5s;\n}\n\n.news__item.alt {\n  flex-direction: row-reverse;\n}\n\n.news__item:hover {\n  border: 2px solid red;\n}\n\n.news__item .news__meta {\n  position: relative;\n  width: 40%;\n  height: auto;\n}\n\n.news__item .news__meta-photo {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-size: cover;\n  background-position: center;\n  -webkit-filter: grayscale(100%);\n  filter: grayscale(100%);\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n  margin: auto;\n  padding: 0;\n  list-style: none;\n  font-family: "JetBrains Mono", monospace;\n}\n\n.news__item .news__meta-details {\n  width: 100%;\n  padding: 10px;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: -120%;\n  /* margin: auto; */\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  font-size: 14px;\n\n  transition: left 0.5s ease-in-out;\n}\n\n.news__item .news__description {\n  width: 60%;\n  padding: 1rem;\n  background: #fff;\n  position: relative;\n  z-index: 1;\n}\n\n.news__item .news__description h2 {\n  line-height: 1;\n  margin: 0;\n  font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n  font-size: 14px;\n  font-weight: 300;\n  text-transform: uppercase;\n  color: #a2a2a2;\n  margin-top: 10px;\n}\n\n.news__item .news__description .news__read-more {\n  text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n  color: red;\n  display: inline-block;\n  position: relative;\n  text-decoration: none;\n  font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n  content: "→";\n  margin-left: -10px;\n  opacity: 0;\n  vertical-align: middle;\n\n  transition: margin 0.35s ease-in-out, opacity 0.35s ease-in-out;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n  margin-left: 5px;\n  opacity: 1;\n}\n\n.news__item p:first-of-type {\n  margin-top: 1.25rem;\n  position: relative;\n}\n\n.news__item:hover .news__meta-details {\n  left: 0%;\n}\n\n/* QUERIES */\n\n@media all and (max-width: 780px) {\n  header {\n    padding: 20px;\n  }\n\n  main {\n    flex-direction: column;\n  }\n\n  .sources {\n    width: 100%;\n    height: 40px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    overflow: auto;\n    align-items: center;\n    gap: 20px;\n    background-color: var(--black);\n\n    padding: 20px 0;\n    z-index: 100;\n  }\n\n  .source__item-name {\n    white-space: nowrap;\n  }\n\n  .news {\n    width: 100%;\n    padding-top: 60px;\n  }\n}\n\n@media all and (max-width: 560px) {\n  .news__item,\n  .news__item.alt {\n    flex-direction: column;\n  }\n\n  .news__item .news__meta {\n    width: 100%;\n    height: 240px;\n  }\n\n  .news__item .news__description {\n    width: 100%;\n  }\n\n  .news__item.alt .news__meta-details {\n    padding-left: 10px;\n  }\n}\n',"",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=JetBrains+Mono:wght@300;400;500;600;700&display=swap");\n\n:root {\n  --black: #17181c;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  width: 100%;\n  min-height: 100vh;\n  height: 100%;\n  color: #fff;\n  background: var(--black);\n  font-family: "Inter", sans-serif;\n  font-family: "JetBrains Mono", monospace;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  padding: 10px 20px;\n  background-color: var(--black);\n  z-index: 100;\n}\n\nheader h1 {\n  font-size: 32px;\n  font-weight: 800;\n}\n\nfooter {\n  width: 100%;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  color: #fff;\n}\n\nfooter .copyright {\n  font-size: 14px;\n  color: inherit;\n  text-align: right;\n}\n\nfooter .copyright a {\n  display: inline-block;\n  color: inherit;\n  text-decoration: none;\n  transform: translateY(0);\n\n  transition: all 0.4s ease-in-out;\n  cursor: pointer;\n}\n\nfooter .copyright a:hover {\n  color: inherit;\n  opacity: 0.4;\n  transform: translateY(-0.25em);\n}\n\nfooter .copyright:before {\n  content: "© ";\n}\n\nmain {\n  position: relative;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  padding: 60px 20px;\n  flex: 1;\n}\n\n/* SOURCES */\n\n.sources {\n  position: fixed;\n  width: 30vw;\n  height: 100vh;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: flex-start;\n  gap: 2px;\n  padding: 20px 0 180px;\n\n  font-family: "JetBrains Mono", monospace;\n}\n\n.source__item {\n  font: inherit;\n  line-height: 1;\n  color: #fff;\n\n  transition: all 0.4s ease-in-out;\n  cursor: pointer;\n}\n\n.source__item:hover,\n.source__item:focus {\n  opacity: 0.4;\n  transform: translateY(-0.25em);\n}\n\n.active {\n  color: red;\n}\n\n.source__item.active:hover,\n.source__item.active:focus {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n/* NEWS */\n\n.news {\n  padding: 20px 0;\n  width: 70vw;\n  position: relative;\n  margin-left: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.news__item {\n  /* max-width: 900px; */\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n\n  color: var(--black);\n  font-family: "Inter", monospace;\n  line-height: 1.2;\n\n  background: #fff;\n  border: 2px solid var(--black);\n  border-radius: 0;\n  overflow: hidden;\n\n  transition: border 0.5s;\n}\n\n.news__item.alt {\n  flex-direction: row-reverse;\n}\n\n.news__item:hover {\n  border: 2px solid red;\n}\n\n.news__item .news__meta {\n  position: relative;\n  width: 40%;\n  height: auto;\n}\n\n.news__item .news__meta-photo {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-size: cover;\n  background-position: center;\n  -webkit-filter: grayscale(100%);\n  filter: grayscale(100%);\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n  margin: auto;\n  padding: 0;\n  list-style: none;\n  font-family: "JetBrains Mono", monospace;\n}\n\n.news__item .news__meta-details {\n  width: 100%;\n  padding: 10px;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: -120%;\n  /* margin: auto; */\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  font-size: 14px;\n\n  transition: left 0.5s ease-in-out;\n}\n\n.news__item .news__description {\n  width: 60%;\n  padding: 1rem;\n  background: #fff;\n  position: relative;\n  z-index: 1;\n}\n\n.news__item .news__description h2 {\n  line-height: 1;\n  margin: 0;\n  font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n  font-size: 14px;\n  font-weight: 300;\n  text-transform: uppercase;\n  color: #a2a2a2;\n  margin-top: 10px;\n}\n\n.news__item .news__description .news__read-more {\n  text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n  color: red;\n  display: inline-block;\n  position: relative;\n  text-decoration: none;\n  font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n  content: "→";\n  margin-left: -10px;\n  opacity: 0;\n  vertical-align: middle;\n\n  transition: margin 0.35s ease-in-out, opacity 0.35s ease-in-out;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n  margin-left: 5px;\n  opacity: 1;\n}\n\n.news__item p:first-of-type {\n  margin-top: 1.25rem;\n  position: relative;\n}\n\n.news__item:hover .news__meta-details {\n  left: 0%;\n}\n\n/* QUERIES */\n\n@media all and (max-width: 780px) {\n  header {\n    padding: 20px;\n  }\n\n  main {\n    flex-direction: column;\n  }\n\n  .sources {\n    width: 100%;\n    height: 40px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    overflow: auto;\n    align-items: center;\n    gap: 20px;\n    background-color: var(--black);\n\n    padding: 20px 0;\n    z-index: 100;\n  }\n\n  .source__item-name {\n    white-space: nowrap;\n  }\n\n  .news {\n    width: 100%;\n    padding-top: 60px;\n  }\n}\n\n@media all and (max-width: 560px) {\n  .news__item,\n  .news__item.alt {\n    flex-direction: column;\n  }\n\n  .news__item .news__meta {\n    width: 100%;\n    height: 240px;\n  }\n\n  .news__item .news__description {\n    width: 100%;\n  }\n\n  .news__item.alt .news__meta-details {\n    padding-left: 10px;\n  }\n}\n'],sourceRoot:""}]);const A=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var A=0;A<n.length;A++){var s=[].concat(n[A]);r&&o[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var r,o,i=[],a=!0,A=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(n){A=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(A)throw o}}return i}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if(!a)return i;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),c="/*# ".concat(s," */"),l=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},427:(n,e,t)=>{t.r(e),t.d(e,{default:()=>a});var r=t(379),o=t.n(r),i=t(767);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},379:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),i=[];function a(n){for(var e=-1,t=0;t<i.length;t++)if(i[t].identifier===n){e=t;break}return e}function A(n,e){for(var t={},r=[],o=0;o<n.length;o++){var A=n[o],s=e.base?A[0]+e.base:A[0],c=t[s]||0,l="".concat(s," ").concat(c);t[s]=c+1;var d=a(l),f={css:A[1],media:A[2],sourceMap:A[3]};-1!==d?(i[d].references++,i[d].updater(f)):i.push({identifier:l,updater:m(f,e),references:1}),r.push(l)}return r}function s(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var a=o(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,l=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function d(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function f(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var u=null,p=0;function m(n,e){var t,r,o;if(e.singleton){var i=p++;t=u||(u=s(e)),r=d.bind(null,t,i,!1),o=d.bind(null,t,i,!0)}else t=s(e),r=f.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=A(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=a(t[r]);i[o].references--}for(var s=A(n,e),c=0;c<t.length;c++){var l=a(t[c]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}t=s}}}},717:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(842)),i=t(527);e.default=class{constructor(){this.controller=new o.default,this.view=new i.AppView}start(){const n=document.querySelector(".sources");if(!n)throw Error("Can't find DOM element .sources");const e=n.children;if(!e)throw Error("Can't find children of .sources");n.addEventListener("click",(n=>{const t=n.target;if(!t)throw Error("Can't find e.target element.");if(!(t instanceof HTMLElement))return;const r=t.closest(".source__item");if(!r)throw Error("Can't find DOM element .source__item.");[...e].forEach((n=>n.classList.remove("active"))),r.classList.add("active"),this.controller.getNews(n,(n=>this.view.renderNews(n)))})),this.controller.getSources((n=>this.view.renderSources(n)))}}},853:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(24));class i extends o.default{constructor(){super("https://rss-news-api.onrender.com/",{apiKey:"75c1cc08fa9141c3a35d0fc4d548f8d1"})}}e.default=i},842:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(853));class i extends o.default{getSources(n){super.getResp({endpoint:"sources"},n)}getNews(n,e){let t=n.target;const r=n.currentTarget;if(!t)throw Error("Can't find e.target element.");if(!r)throw Error("Can't find e.currentTarget element.");for(;t!==r;){if(t.classList.contains("source__item")){const n=t.getAttribute("data-source-id")||"";return void(r.getAttribute("data-source")!==n&&(r.setAttribute("data-source",n),super.getResp({endpoint:"everything",options:{sources:n}},e)))}const n=t.parentNode;if(!n)throw Error("Can't find target.parentNode.");t=n}}}e.default=i},24:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0});const r=t(130);e.default=class{constructor(n,e){this.baseLink=n,this.options=e}getResp({endpoint:n,options:e},t){this.load("GET",n,t,null!=e?e:{})}errorHandler(n){if(!n.ok){if(n.status===r.HttpStatusCode.Unauthorized||n.status===r.HttpStatusCode.NotFound){const e=`Sorry, but there is ${n.status} error: ${n.statusText}`;throw Error(e)}throw Error(n.statusText)}return n}makeUrl(n,e){const t=Object.assign(Object.assign({},this.options),n);let r=`${this.baseLink}${e}?`;return Object.keys(t).forEach((n=>{r+=`${n}=${t[n]}&`})),r.slice(0,-1)}load(n,e,t,r){fetch(this.makeUrl(r,e),{method:n}).then(this.errorHandler).then((n=>n.json())).then((n=>t(n))).catch((n=>console.error(n)))}}},527:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0}),e.AppView=void 0;const o=r(t(591)),i=r(t(710));class a{constructor(){this.news=new o.default,this.sources=new i.default}renderNews(n){var e;if("articles"in n){const t=null!==(e=null==n?void 0:n.articles)&&void 0!==e?e:[];this.news.render(t)}}renderSources(n){var e;if("sources"in n){const t=null!==(e=null==n?void 0:n.sources)&&void 0!==e?e:[];this.sources.render(t)}}}e.AppView=a,e.default=a},591:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(698));e.default=class{render(n){const e=n.length>=10?n.filter(((n,e)=>e<10)):n,t=document.createDocumentFragment(),r=document.querySelector("#newsItemTemp"),i=document.querySelector(".news");if(!(r&&r instanceof HTMLTemplateElement))throw Error("Can't find DOM element #newsItemTemp");if(!i)throw Error("Can't find DOM element .news");e.forEach(((n,e)=>{const i=r.content.cloneNode(!0);if(!(i&&i instanceof DocumentFragment))throw Error(`Failed to clone ${r}`);const a=i.querySelector(".news__item"),A=i.querySelector(".news__meta-photo"),s=i.querySelector(".news__meta-author"),c=i.querySelector(".news__meta-date"),l=i.querySelector(".news__description-title"),d=i.querySelector(".news__description-source"),f=i.querySelector(".news__description-content"),u=i.querySelector(".news__read-more a");if(!a)throw Error("Can't find DOM element .news__item");if(!A)throw Error("Can't find DOM element .news__meta-photo");if(!s)throw Error("Can't find DOM element .news__meta-author");if(!c)throw Error("Can't find DOM element .news__meta-date");if(!l)throw Error("Can't find DOM element .news__description-title");if(!d)throw Error("Can't find DOM element .news__description-source");if(!f)throw Error("Can't find DOM element .news__description-content");if(!u)throw Error("Can't find DOM element .news__read-more a");e%2&&a.classList.add("alt"),A instanceof HTMLElement&&(A.style.backgroundImage=`url(${n.urlToImage||o.default})`),s.textContent=n.author||n.source.name,c.textContent=n.publishedAt.slice(0,10).split("-").reverse().join("-"),l.textContent=n.title,d.textContent=n.source.name,f.textContent=n.description,u.setAttribute("href",n.url),t.append(i)})),i.innerHTML="",i.appendChild(t)}}},710:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{render(n){const e=[...n],t=document.createDocumentFragment(),r=document.querySelector("#sourceItemTemp"),o=document.querySelector(".sources");if(!(r&&r instanceof HTMLTemplateElement))throw Error("Can't find DOM element #sourceItemTemp");if(!o)throw Error("Can't find DOM element .sources");e.forEach((n=>{const e=r.content.cloneNode(!0);if(!(e&&e instanceof DocumentFragment))throw Error(`Failed to clone ${r}`);const o=e.querySelector(".source__item"),i=e.querySelector(".source__item-name");if(!i)throw Error("Can't find DOM element .source__item-name");if(!o)throw Error("Can't find DOM element .source__item");i.textContent=n.name,o.setAttribute("data-source-id",n.id),t.append(e)})),o.append(t)}}},607:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(717));t(427),(new o.default).start()},130:(n,e)=>{var t;Object.defineProperty(e,"__esModule",{value:!0}),e.HttpStatusCode=void 0,function(n){n[n.Unauthorized=401]="Unauthorized",n[n.NotFound=404]="NotFound"}(t||(e.HttpStatusCode=t={}))},698:(n,e,t)=>{n.exports=t.p+"0505019b0de830b4c2c7.png"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r].call(i.exports,i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!n;)n=r[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,t(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ty9LLEdBQ1IsR0FBc0IsaUJBQVhKLE9BQXFCLE9BQU9BLE1BQ3hDLENBQ0EsQ0FQdUIsR0NBeEJzSyxFQUFvQnhNLEVBQUksQ0FBQ2lELEVBQUtxSyxJQUFVbk4sT0FBT0MsVUFBVW1OLGVBQWU3TixLQUFLdUQsRUFBS3FLLEdDQ2xGZCxFQUFvQmdCLEVBQUs5UCxJQUNILG9CQUFYeUIsUUFBMEJBLE9BQU9zTyxhQUMxQ3ROLE9BQU9vRyxlQUFlN0ksRUFBU3lCLE9BQU9zTyxZQUFhLENBQUU1TixNQUFPLFdBRTdETSxPQUFPb0csZUFBZTdJLEVBQVMsYUFBYyxDQUFFbUMsT0FBTyxHQUFPLEUsTUNMOUQsSUFBSTZOLEVBQ0FsQixFQUFvQlcsRUFBRVEsZ0JBQWVELEVBQVlsQixFQUFvQlcsRUFBRVMsU0FBVyxJQUN0RixJQUFJNUwsRUFBV3dLLEVBQW9CVyxFQUFFbkwsU0FDckMsSUFBSzBMLEdBQWExTCxJQUNiQSxFQUFTNkwsZ0JBQ1pILEVBQVkxTCxFQUFTNkwsY0FBY0MsTUFDL0JKLEdBQVcsQ0FDZixJQUFJSyxFQUFVL0wsRUFBU2dNLHFCQUFxQixVQUM1QyxHQUFHRCxFQUFRdFAsT0FFVixJQURBLElBQUlMLEVBQUkyUCxFQUFRdFAsT0FBUyxFQUNsQkwsR0FBSyxJQUFNc1AsR0FBV0EsRUFBWUssRUFBUTNQLEtBQUswUCxHQUV4RCxDQUlELElBQUtKLEVBQVcsTUFBTSxJQUFJeEosTUFBTSx5REFDaEN3SixFQUFZQSxFQUFVTyxRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRnpCLEVBQW9CMEIsRUFBSVIsQyxLQ2xCeEJsQixFQUFvQjJCLFFBQUt4QixFQ0dDSCxFQUFvQixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTmV3c0pTLy4vc3JjL2dsb2JhbC5jc3MiLCJ3ZWJwYWNrOi8vTmV3c0pTLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9OZXdzSlMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9OZXdzSlMvLi9zcmMvZ2xvYmFsLmNzcz9kM2JjIiwid2VicGFjazovL05ld3NKUy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9OZXdzSlMvLi9zcmMvY29tcG9uZW50cy9hcHAvYXBwLnRzIiwid2VicGFjazovL05ld3NKUy8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xsZXIvYXBwTG9hZGVyLnRzIiwid2VicGFjazovL05ld3NKUy8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xsZXIvY29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9OZXdzSlMvLi9zcmMvY29tcG9uZW50cy9jb250cm9sbGVyL2xvYWRlci50cyIsIndlYnBhY2s6Ly9OZXdzSlMvLi9zcmMvY29tcG9uZW50cy92aWV3L2FwcFZpZXcudHMiLCJ3ZWJwYWNrOi8vTmV3c0pTLy4vc3JjL2NvbXBvbmVudHMvdmlldy9uZXdzLnRzIiwid2VicGFjazovL05ld3NKUy8uL3NyYy9jb21wb25lbnRzL3ZpZXcvc291cmNlcy50cyIsIndlYnBhY2s6Ly9OZXdzSlMvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vTmV3c0pTLy4vc3JjL3R5cGVzL2VudW1zLnRzIiwid2VicGFjazovL05ld3NKUy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9OZXdzSlMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vTmV3c0pTL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9OZXdzSlMvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9OZXdzSlMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9OZXdzSlMvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9OZXdzSlMvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vTmV3c0pTL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9OZXdzSlMvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW50ZXI6d2dodEA0MDA7NjAwOzcwMCZmYW1pbHk9SmV0QnJhaW5zK01vbm86d2dodEAzMDA7NDAwOzUwMDs2MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIjpyb290IHtcXG4gIC0tYmxhY2s6ICMxNzE4MWM7XFxufVxcblxcbioge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbmJvZHkge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmxhY2spO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJJbnRlclxcXCIsIHNhbnMtc2VyaWY7XFxuICBmb250LWZhbWlseTogXFxcIkpldEJyYWlucyBNb25vXFxcIiwgbW9ub3NwYWNlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbmhlYWRlciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ibGFjayk7XFxuICB6LWluZGV4OiAxMDA7XFxufVxcblxcbmhlYWRlciBoMSB7XFxuICBmb250LXNpemU6IDMycHg7XFxuICBmb250LXdlaWdodDogODAwO1xcbn1cXG5cXG5mb290ZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAyMHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcblxcbmZvb3RlciAuY29weXJpZ2h0IHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVxcblxcbmZvb3RlciAuY29weXJpZ2h0IGEge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuXFxuICB0cmFuc2l0aW9uOiBhbGwgMC40cyBlYXNlLWluLW91dDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuZm9vdGVyIC5jb3B5cmlnaHQgYTpob3ZlciB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIG9wYWNpdHk6IDAuNDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMC4yNWVtKTtcXG59XFxuXFxuZm9vdGVyIC5jb3B5cmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCLCqSBcXFwiO1xcbn1cXG5cXG5tYWluIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgcGFkZGluZzogNjBweCAyMHB4O1xcbiAgZmxleDogMTtcXG59XFxuXFxuLyogU09VUkNFUyAqL1xcblxcbi5zb3VyY2VzIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHdpZHRoOiAzMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGZsZXgtd3JhcDogbm93cmFwO1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICBnYXA6IDJweDtcXG4gIHBhZGRpbmc6IDIwcHggMCAxODBweDtcXG5cXG4gIGZvbnQtZmFtaWx5OiBcXFwiSmV0QnJhaW5zIE1vbm9cXFwiLCBtb25vc3BhY2U7XFxufVxcblxcbi5zb3VyY2VfX2l0ZW0ge1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgY29sb3I6ICNmZmY7XFxuXFxuICB0cmFuc2l0aW9uOiBhbGwgMC40cyBlYXNlLWluLW91dDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnNvdXJjZV9faXRlbTpob3ZlcixcXG4uc291cmNlX19pdGVtOmZvY3VzIHtcXG4gIG9wYWNpdHk6IDAuNDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMC4yNWVtKTtcXG59XFxuXFxuLmFjdGl2ZSB7XFxuICBjb2xvcjogcmVkO1xcbn1cXG5cXG4uc291cmNlX19pdGVtLmFjdGl2ZTpob3ZlcixcXG4uc291cmNlX19pdGVtLmFjdGl2ZTpmb2N1cyB7XFxuICBvcGFjaXR5OiAxO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xcbn1cXG5cXG4vKiBORVdTICovXFxuXFxuLm5ld3Mge1xcbiAgcGFkZGluZzogMjBweCAwO1xcbiAgd2lkdGg6IDcwdnc7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW4tbGVmdDogYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4ubmV3c19faXRlbSB7XFxuICAvKiBtYXgtd2lkdGg6IDkwMHB4OyAqL1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG5cXG4gIGNvbG9yOiB2YXIoLS1ibGFjayk7XFxuICBmb250LWZhbWlseTogXFxcIkludGVyXFxcIiwgbW9ub3NwYWNlO1xcbiAgbGluZS1oZWlnaHQ6IDEuMjtcXG5cXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1ibGFjayk7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG5cXG4gIHRyYW5zaXRpb246IGJvcmRlciAwLjVzO1xcbn1cXG5cXG4ubmV3c19faXRlbS5hbHQge1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlO1xcbn1cXG5cXG4ubmV3c19faXRlbTpob3ZlciB7XFxuICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XFxufVxcblxcbi5uZXdzX19pdGVtIC5uZXdzX19tZXRhIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiA0MCU7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcblxcbi5uZXdzX19pdGVtIC5uZXdzX19tZXRhLXBob3RvIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxuICAtd2Via2l0LWZpbHRlcjogZ3JheXNjYWxlKDEwMCUpO1xcbiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7XFxufVxcblxcbi5uZXdzX19pdGVtIC5uZXdzX19tZXRhLWRldGFpbHMsXFxuLm5ld3NfX2l0ZW0gLm5ld3NfX21ldGEtZGV0YWlscyB1bCB7XFxuICBtYXJnaW46IGF1dG87XFxuICBwYWRkaW5nOiAwO1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiSmV0QnJhaW5zIE1vbm9cXFwiLCBtb25vc3BhY2U7XFxufVxcblxcbi5uZXdzX19pdGVtIC5uZXdzX19tZXRhLWRldGFpbHMge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogLTEyMCU7XFxuICAvKiBtYXJnaW46IGF1dG87ICovXFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNik7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG5cXG4gIHRyYW5zaXRpb246IGxlZnQgMC41cyBlYXNlLWluLW91dDtcXG59XFxuXFxuLm5ld3NfX2l0ZW0gLm5ld3NfX2Rlc2NyaXB0aW9uIHtcXG4gIHdpZHRoOiA2MCU7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi5uZXdzX19pdGVtIC5uZXdzX19kZXNjcmlwdGlvbiBoMiB7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIG1hcmdpbjogMDtcXG4gIGZvbnQtc2l6ZTogMS43cmVtO1xcbn1cXG5cXG4ubmV3c19faXRlbSAubmV3c19fZGVzY3JpcHRpb24gaDMge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICBjb2xvcjogI2EyYTJhMjtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxufVxcblxcbi5uZXdzX19pdGVtIC5uZXdzX19kZXNjcmlwdGlvbiAubmV3c19fcmVhZC1tb3JlIHtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG5cXG4ubmV3c19faXRlbSAubmV3c19fZGVzY3JpcHRpb24gLm5ld3NfX3JlYWQtbW9yZSBhIHtcXG4gIGNvbG9yOiByZWQ7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBmb250LXdlaWdodDogODAwO1xcbn1cXG5cXG4ubmV3c19faXRlbSAubmV3c19fZGVzY3JpcHRpb24gLm5ld3NfX3JlYWQtbW9yZSBhOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCLihpJcXFwiO1xcbiAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xcbiAgb3BhY2l0eTogMDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuXFxuICB0cmFuc2l0aW9uOiBtYXJnaW4gMC4zNXMgZWFzZS1pbi1vdXQsIG9wYWNpdHkgMC4zNXMgZWFzZS1pbi1vdXQ7XFxufVxcblxcbi5uZXdzX19pdGVtIC5uZXdzX19kZXNjcmlwdGlvbiAubmV3c19fcmVhZC1tb3JlIGE6aG92ZXI6YWZ0ZXIge1xcbiAgbWFyZ2luLWxlZnQ6IDVweDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5uZXdzX19pdGVtIHA6Zmlyc3Qtb2YtdHlwZSB7XFxuICBtYXJnaW4tdG9wOiAxLjI1cmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4ubmV3c19faXRlbTpob3ZlciAubmV3c19fbWV0YS1kZXRhaWxzIHtcXG4gIGxlZnQ6IDAlO1xcbn1cXG5cXG4vKiBRVUVSSUVTICovXFxuXFxuQG1lZGlhIGFsbCBhbmQgKG1heC13aWR0aDogNzgwcHgpIHtcXG4gIGhlYWRlciB7XFxuICAgIHBhZGRpbmc6IDIwcHg7XFxuICB9XFxuXFxuICBtYWluIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIH1cXG5cXG4gIC5zb3VyY2VzIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogNDBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZmxleC13cmFwOiBub3dyYXA7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBnYXA6IDIwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJsYWNrKTtcXG5cXG4gICAgcGFkZGluZzogMjBweCAwO1xcbiAgICB6LWluZGV4OiAxMDA7XFxuICB9XFxuXFxuICAuc291cmNlX19pdGVtLW5hbWUge1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgfVxcblxcbiAgLm5ld3Mge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgcGFkZGluZy10b3A6IDYwcHg7XFxuICB9XFxufVxcblxcbkBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDU2MHB4KSB7XFxuICAubmV3c19faXRlbSxcXG4gIC5uZXdzX19pdGVtLmFsdCB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB9XFxuXFxuICAubmV3c19faXRlbSAubmV3c19fbWV0YSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDI0MHB4O1xcbiAgfVxcblxcbiAgLm5ld3NfX2l0ZW0gLm5ld3NfX2Rlc2NyaXB0aW9uIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxuXFxuICAubmV3c19faXRlbS5hbHQgLm5ld3NfX21ldGEtZGV0YWlscyB7XFxuICAgIHBhZGRpbmctbGVmdDogMTBweDtcXG4gIH1cXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2dsb2JhbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsU0FBUztFQUNULHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxpQkFBaUI7RUFDakIsWUFBWTtFQUNaLFdBQVc7RUFDWCx3QkFBd0I7RUFDeEIsZ0NBQWdDO0VBQ2hDLHdDQUF3QztFQUN4QyxhQUFhO0VBQ2Isc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsV0FBVztFQUNYLGVBQWU7RUFDZixNQUFNO0VBQ04sT0FBTztFQUNQLGtCQUFrQjtFQUNsQiw4QkFBOEI7RUFDOUIsWUFBWTtBQUNkOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxhQUFhO0VBQ2IsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQix5QkFBeUI7RUFDekIsV0FBVztBQUNiOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGNBQWM7RUFDZCxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsY0FBYztFQUNkLHFCQUFxQjtFQUNyQix3QkFBd0I7O0VBRXhCLGdDQUFnQztFQUNoQyxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsY0FBYztFQUNkLFlBQVk7RUFDWiw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsV0FBVztFQUNYLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsdUJBQXVCO0VBQ3ZCLGtCQUFrQjtFQUNsQixPQUFPO0FBQ1Q7O0FBRUEsWUFBWTs7QUFFWjtFQUNFLGVBQWU7RUFDZixXQUFXO0VBQ1gsYUFBYTtFQUNiLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGlCQUFpQjtFQUNqQix1QkFBdUI7RUFDdkIsUUFBUTtFQUNSLHFCQUFxQjs7RUFFckIsd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGNBQWM7RUFDZCxXQUFXOztFQUVYLGdDQUFnQztFQUNoQyxlQUFlO0FBQ2pCOztBQUVBOztFQUVFLFlBQVk7RUFDWiw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7O0VBRUUsVUFBVTtFQUNWLHdCQUF3QjtBQUMxQjs7QUFFQSxTQUFTOztBQUVUO0VBQ0UsZUFBZTtFQUNmLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsaUJBQWlCO0VBQ2pCLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsU0FBUztBQUNYOztBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLFdBQVc7RUFDWCxhQUFhO0VBQ2IsbUJBQW1COztFQUVuQixtQkFBbUI7RUFDbkIsK0JBQStCO0VBQy9CLGdCQUFnQjs7RUFFaEIsZ0JBQWdCO0VBQ2hCLDhCQUE4QjtFQUM5QixnQkFBZ0I7RUFDaEIsZ0JBQWdCOztFQUVoQix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixNQUFNO0VBQ04sUUFBUTtFQUNSLFNBQVM7RUFDVCxPQUFPO0VBQ1Asc0JBQXNCO0VBQ3RCLDJCQUEyQjtFQUMzQiwrQkFBK0I7RUFDL0IsdUJBQXVCO0FBQ3pCOztBQUVBOztFQUVFLFlBQVk7RUFDWixVQUFVO0VBQ1YsZ0JBQWdCO0VBQ2hCLHdDQUF3QztBQUMxQzs7QUFFQTtFQUNFLFdBQVc7RUFDWCxhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLE1BQU07RUFDTixTQUFTO0VBQ1QsV0FBVztFQUNYLGtCQUFrQjtFQUNsQiw4QkFBOEI7RUFDOUIsV0FBVztFQUNYLGVBQWU7O0VBRWYsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGFBQWE7RUFDYixnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLFVBQVU7QUFDWjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxTQUFTO0VBQ1QsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQix5QkFBeUI7RUFDekIsY0FBYztFQUNkLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLFVBQVU7RUFDVixxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLHFCQUFxQjtFQUNyQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixzQkFBc0I7O0VBRXRCLCtEQUErRDtBQUNqRTs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixVQUFVO0FBQ1o7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsUUFBUTtBQUNWOztBQUVBLFlBQVk7O0FBRVo7RUFDRTtJQUNFLGFBQWE7RUFDZjs7RUFFQTtJQUNFLHNCQUFzQjtFQUN4Qjs7RUFFQTtJQUNFLFdBQVc7SUFDWCxZQUFZO0lBQ1osYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLG1CQUFtQjtJQUNuQixTQUFTO0lBQ1QsOEJBQThCOztJQUU5QixlQUFlO0lBQ2YsWUFBWTtFQUNkOztFQUVBO0lBQ0UsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0UsV0FBVztJQUNYLGlCQUFpQjtFQUNuQjtBQUNGOztBQUVBO0VBQ0U7O0lBRUUsc0JBQXNCO0VBQ3hCOztFQUVBO0lBQ0UsV0FBVztJQUNYLGFBQWE7RUFDZjs7RUFFQTtJQUNFLFdBQVc7RUFDYjs7RUFFQTtJQUNFLGtCQUFrQjtFQUNwQjtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUludGVyOndnaHRANDAwOzYwMDs3MDAmZmFtaWx5PUpldEJyYWlucytNb25vOndnaHRAMzAwOzQwMDs1MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXBcXFwiKTtcXG5cXG46cm9vdCB7XFxuICAtLWJsYWNrOiAjMTcxODFjO1xcbn1cXG5cXG4qIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5ib2R5IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJsYWNrKTtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiSW50ZXJcXFwiLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJKZXRCcmFpbnMgTW9ub1xcXCIsIG1vbm9zcGFjZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG5oZWFkZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmxhY2spO1xcbiAgei1pbmRleDogMTAwO1xcbn1cXG5cXG5oZWFkZXIgaDEge1xcbiAgZm9udC1zaXplOiAzMnB4O1xcbiAgZm9udC13ZWlnaHQ6IDgwMDtcXG59XFxuXFxuZm9vdGVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMjBweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG5mb290ZXIgLmNvcHlyaWdodCB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG5cXG5mb290ZXIgLmNvcHlyaWdodCBhIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xcblxcbiAgdHJhbnNpdGlvbjogYWxsIDAuNHMgZWFzZS1pbi1vdXQ7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbmZvb3RlciAuY29weXJpZ2h0IGE6aG92ZXIge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBvcGFjaXR5OiAwLjQ7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTAuMjVlbSk7XFxufVxcblxcbmZvb3RlciAuY29weXJpZ2h0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiwqkgXFxcIjtcXG59XFxuXFxubWFpbiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIHBhZGRpbmc6IDYwcHggMjBweDtcXG4gIGZsZXg6IDE7XFxufVxcblxcbi8qIFNPVVJDRVMgKi9cXG5cXG4uc291cmNlcyB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB3aWR0aDogMzB2dztcXG4gIGhlaWdodDogMTAwdmg7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LXdyYXA6IG5vd3JhcDtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgZ2FwOiAycHg7XFxuICBwYWRkaW5nOiAyMHB4IDAgMTgwcHg7XFxuXFxuICBmb250LWZhbWlseTogXFxcIkpldEJyYWlucyBNb25vXFxcIiwgbW9ub3NwYWNlO1xcbn1cXG5cXG4uc291cmNlX19pdGVtIHtcXG4gIGZvbnQ6IGluaGVyaXQ7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGNvbG9yOiAjZmZmO1xcblxcbiAgdHJhbnNpdGlvbjogYWxsIDAuNHMgZWFzZS1pbi1vdXQ7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5zb3VyY2VfX2l0ZW06aG92ZXIsXFxuLnNvdXJjZV9faXRlbTpmb2N1cyB7XFxuICBvcGFjaXR5OiAwLjQ7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTAuMjVlbSk7XFxufVxcblxcbi5hY3RpdmUge1xcbiAgY29sb3I6IHJlZDtcXG59XFxuXFxuLnNvdXJjZV9faXRlbS5hY3RpdmU6aG92ZXIsXFxuLnNvdXJjZV9faXRlbS5hY3RpdmU6Zm9jdXMge1xcbiAgb3BhY2l0eTogMTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcXG59XFxuXFxuLyogTkVXUyAqL1xcblxcbi5uZXdzIHtcXG4gIHBhZGRpbmc6IDIwcHggMDtcXG4gIHdpZHRoOiA3MHZ3O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMTBweDtcXG59XFxuXFxuLm5ld3NfX2l0ZW0ge1xcbiAgLyogbWF4LXdpZHRoOiA5MDBweDsgKi9cXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuXFxuICBjb2xvcjogdmFyKC0tYmxhY2spO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJJbnRlclxcXCIsIG1vbm9zcGFjZTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjI7XFxuXFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tYmxhY2spO1xcbiAgYm9yZGVyLXJhZGl1czogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuXFxuICB0cmFuc2l0aW9uOiBib3JkZXIgMC41cztcXG59XFxuXFxuLm5ld3NfX2l0ZW0uYWx0IHtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcXG59XFxuXFxuLm5ld3NfX2l0ZW06aG92ZXIge1xcbiAgYm9yZGVyOiAycHggc29saWQgcmVkO1xcbn1cXG5cXG4ubmV3c19faXRlbSAubmV3c19fbWV0YSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogNDAlO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4ubmV3c19faXRlbSAubmV3c19fbWV0YS1waG90byB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcbiAgLXdlYmtpdC1maWx0ZXI6IGdyYXlzY2FsZSgxMDAlKTtcXG4gIGZpbHRlcjogZ3JheXNjYWxlKDEwMCUpO1xcbn1cXG5cXG4ubmV3c19faXRlbSAubmV3c19fbWV0YS1kZXRhaWxzLFxcbi5uZXdzX19pdGVtIC5uZXdzX19tZXRhLWRldGFpbHMgdWwge1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgcGFkZGluZzogMDtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBmb250LWZhbWlseTogXFxcIkpldEJyYWlucyBNb25vXFxcIiwgbW9ub3NwYWNlO1xcbn1cXG5cXG4ubmV3c19faXRlbSAubmV3c19fbWV0YS1kZXRhaWxzIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IC0xMjAlO1xcbiAgLyogbWFyZ2luOiBhdXRvOyAqL1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjYpO1xcbiAgY29sb3I6ICNmZmY7XFxuICBmb250LXNpemU6IDE0cHg7XFxuXFxuICB0cmFuc2l0aW9uOiBsZWZ0IDAuNXMgZWFzZS1pbi1vdXQ7XFxufVxcblxcbi5uZXdzX19pdGVtIC5uZXdzX19kZXNjcmlwdGlvbiB7XFxuICB3aWR0aDogNjAlO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAxO1xcbn1cXG5cXG4ubmV3c19faXRlbSAubmV3c19fZGVzY3JpcHRpb24gaDIge1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBtYXJnaW46IDA7XFxuICBmb250LXNpemU6IDEuN3JlbTtcXG59XFxuXFxuLm5ld3NfX2l0ZW0gLm5ld3NfX2Rlc2NyaXB0aW9uIGgzIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgY29sb3I6ICNhMmEyYTI7XFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcbn1cXG5cXG4ubmV3c19faXRlbSAubmV3c19fZGVzY3JpcHRpb24gLm5ld3NfX3JlYWQtbW9yZSB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuXFxuLm5ld3NfX2l0ZW0gLm5ld3NfX2Rlc2NyaXB0aW9uIC5uZXdzX19yZWFkLW1vcmUgYSB7XFxuICBjb2xvcjogcmVkO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgZm9udC13ZWlnaHQ6IDgwMDtcXG59XFxuXFxuLm5ld3NfX2l0ZW0gLm5ld3NfX2Rlc2NyaXB0aW9uIC5uZXdzX19yZWFkLW1vcmUgYTphZnRlciB7XFxuICBjb250ZW50OiBcXFwi4oaSXFxcIjtcXG4gIG1hcmdpbi1sZWZ0OiAtMTBweDtcXG4gIG9wYWNpdHk6IDA7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcblxcbiAgdHJhbnNpdGlvbjogbWFyZ2luIDAuMzVzIGVhc2UtaW4tb3V0LCBvcGFjaXR5IDAuMzVzIGVhc2UtaW4tb3V0O1xcbn1cXG5cXG4ubmV3c19faXRlbSAubmV3c19fZGVzY3JpcHRpb24gLm5ld3NfX3JlYWQtbW9yZSBhOmhvdmVyOmFmdGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiA1cHg7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4ubmV3c19faXRlbSBwOmZpcnN0LW9mLXR5cGUge1xcbiAgbWFyZ2luLXRvcDogMS4yNXJlbTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLm5ld3NfX2l0ZW06aG92ZXIgLm5ld3NfX21ldGEtZGV0YWlscyB7XFxuICBsZWZ0OiAwJTtcXG59XFxuXFxuLyogUVVFUklFUyAqL1xcblxcbkBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDc4MHB4KSB7XFxuICBoZWFkZXIge1xcbiAgICBwYWRkaW5nOiAyMHB4O1xcbiAgfVxcblxcbiAgbWFpbiB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB9XFxuXFxuICAuc291cmNlcyB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDQwcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGZsZXgtd3JhcDogbm93cmFwO1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZ2FwOiAyMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ibGFjayk7XFxuXFxuICAgIHBhZGRpbmc6IDIwcHggMDtcXG4gICAgei1pbmRleDogMTAwO1xcbiAgfVxcblxcbiAgLnNvdXJjZV9faXRlbS1uYW1lIHtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIH1cXG5cXG4gIC5uZXdzIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHBhZGRpbmctdG9wOiA2MHB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgYWxsIGFuZCAobWF4LXdpZHRoOiA1NjBweCkge1xcbiAgLm5ld3NfX2l0ZW0sXFxuICAubmV3c19faXRlbS5hbHQge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgfVxcblxcbiAgLm5ld3NfX2l0ZW0gLm5ld3NfX21ldGEge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAyNDBweDtcXG4gIH1cXG5cXG4gIC5uZXdzX19pdGVtIC5uZXdzX19kZXNjcmlwdGlvbiB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgfVxcblxcbiAgLm5ld3NfX2l0ZW0uYWx0IC5uZXdzX19tZXRhLWRldGFpbHMge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9nbG9iYWwuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvbnRyb2xsZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vY29udHJvbGxlci9jb250cm9sbGVyXCIpKTtcbmNvbnN0IGFwcFZpZXdfMSA9IHJlcXVpcmUoXCIuLi92aWV3L2FwcFZpZXdcIik7XG5jbGFzcyBBcHAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgY29udHJvbGxlcl8xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy52aWV3ID0gbmV3IGFwcFZpZXdfMS5BcHBWaWV3KCk7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBjb25zdCBzb3VyY2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zb3VyY2VzXCIgLyogU2VsZWN0b3IuU291cmNlc0NvbnRhaW5lciAqLyk7XG4gICAgICAgIGlmICghc291cmNlcylcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW4ndCBmaW5kIERPTSBlbGVtZW50ICR7XCIuc291cmNlc1wiIC8qIFNlbGVjdG9yLlNvdXJjZXNDb250YWluZXIgKi99YCk7XG4gICAgICAgIGNvbnN0IHNvdXJjZXNUYWJzID0gc291cmNlcy5jaGlsZHJlbjtcbiAgICAgICAgaWYgKCFzb3VyY2VzVGFicylcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW4ndCBmaW5kIGNoaWxkcmVuIG9mICR7XCIuc291cmNlc1wiIC8qIFNlbGVjdG9yLlNvdXJjZXNDb250YWluZXIgKi99YCk7XG4gICAgICAgIHNvdXJjZXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0KVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiQ2FuJ3QgZmluZCBlLnRhcmdldCBlbGVtZW50LlwiKTtcbiAgICAgICAgICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRDb250YWluZXIgPSB0YXJnZXQuY2xvc2VzdChcIi5zb3VyY2VfX2l0ZW1cIiAvKiBTZWxlY3Rvci5Tb3VyY2VJdGVtICovKTtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0Q29udGFpbmVyKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW4ndCBmaW5kIERPTSBlbGVtZW50ICR7XCIuc291cmNlX19pdGVtXCIgLyogU2VsZWN0b3IuU291cmNlSXRlbSAqL30uYCk7XG4gICAgICAgICAgICBbLi4uc291cmNlc1RhYnNdLmZvckVhY2goKHRhYikgPT4gdGFiLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIikpO1xuICAgICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuZ2V0TmV3cyhlLCAoZGF0YSkgPT4gdGhpcy52aWV3LnJlbmRlck5ld3MoZGF0YSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLmdldFNvdXJjZXMoKGRhdGEpID0+IHRoaXMudmlldy5yZW5kZXJTb3VyY2VzKGRhdGEpKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBBcHA7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGxvYWRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvYWRlclwiKSk7XG5jbGFzcyBBcHBMb2FkZXIgZXh0ZW5kcyBsb2FkZXJfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJodHRwczovL3Jzcy1uZXdzLWFwaS5vbnJlbmRlci5jb20vXCIsIHtcbiAgICAgICAgICAgIGFwaUtleTogXCI3NWMxY2MwOGZhOTE0MWMzYTM1ZDBmYzRkNTQ4ZjhkMVwiLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBBcHBMb2FkZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFwcExvYWRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2FwcExvYWRlclwiKSk7XG5jbGFzcyBBcHBDb250cm9sbGVyIGV4dGVuZHMgYXBwTG9hZGVyXzEuZGVmYXVsdCB7XG4gICAgZ2V0U291cmNlcyhjYWxsYmFjaykge1xuICAgICAgICBzdXBlci5nZXRSZXNwKHsgZW5kcG9pbnQ6IFwic291cmNlc1wiIH0sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZ2V0TmV3cyhlLCBjYWxsYmFjaykge1xuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIGNvbnN0IG5ld3NDb250YWluZXIgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIGlmICghdGFyZ2V0KVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDYW4ndCBmaW5kIGUudGFyZ2V0IGVsZW1lbnQuXCIpO1xuICAgICAgICBpZiAoIW5ld3NDb250YWluZXIpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkNhbid0IGZpbmQgZS5jdXJyZW50VGFyZ2V0IGVsZW1lbnQuXCIpO1xuICAgICAgICB3aGlsZSAodGFyZ2V0ICE9PSBuZXdzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInNvdXJjZV9faXRlbVwiKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZUlkID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc291cmNlLWlkXCIpIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKG5ld3NDb250YWluZXIuZ2V0QXR0cmlidXRlKFwiZGF0YS1zb3VyY2VcIikgIT09IHNvdXJjZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld3NDb250YWluZXIuc2V0QXR0cmlidXRlKFwiZGF0YS1zb3VyY2VcIiwgc291cmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICBzdXBlci5nZXRSZXNwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50OiBcImV2ZXJ5dGhpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBzb3VyY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFyZW50Tm9kZSA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgaWYgKCFwYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiQ2FuJ3QgZmluZCB0YXJnZXQucGFyZW50Tm9kZS5cIik7XG4gICAgICAgICAgICB0YXJnZXQgPSBwYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQXBwQ29udHJvbGxlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZW51bXNfMSA9IHJlcXVpcmUoXCIuLi8uLi90eXBlcy9lbnVtc1wiKTtcbmNsYXNzIExvYWRlciB7XG4gICAgY29uc3RydWN0b3IoYmFzZUxpbmssIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5iYXNlTGluayA9IGJhc2VMaW5rO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXRSZXNwKHsgZW5kcG9pbnQsIG9wdGlvbnMgfSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5sb2FkKFwiR0VUXCIsIGVuZHBvaW50LCBjYWxsYmFjaywgb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge30pO1xuICAgIH1cbiAgICBlcnJvckhhbmRsZXIocmVzKSB7XG4gICAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gZW51bXNfMS5IdHRwU3RhdHVzQ29kZS5VbmF1dGhvcml6ZWQgfHwgcmVzLnN0YXR1cyA9PT0gZW51bXNfMS5IdHRwU3RhdHVzQ29kZS5Ob3RGb3VuZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgU29ycnksIGJ1dCB0aGVyZSBpcyAke3Jlcy5zdGF0dXN9IGVycm9yOiAke3Jlcy5zdGF0dXNUZXh0fWA7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihyZXMuc3RhdHVzVGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgbWFrZVVybChvcHRpb25zLCBlbmRwb2ludCkge1xuICAgICAgICBjb25zdCB1cmxPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgbGV0IHVybCA9IGAke3RoaXMuYmFzZUxpbmt9JHtlbmRwb2ludH0/YDtcbiAgICAgICAgT2JqZWN0LmtleXModXJsT3B0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICB1cmwgKz0gYCR7a2V5fT0ke3VybE9wdGlvbnNba2V5XX0mYDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1cmwuc2xpY2UoMCwgLTEpO1xuICAgIH1cbiAgICBsb2FkKG1ldGhvZCwgZW5kcG9pbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgIGZldGNoKHRoaXMubWFrZVVybChvcHRpb25zLCBlbmRwb2ludCksIHsgbWV0aG9kIH0pXG4gICAgICAgICAgICAudGhlbih0aGlzLmVycm9ySGFuZGxlcilcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4gY2FsbGJhY2soZGF0YSkpXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBMb2FkZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXBwVmlldyA9IHZvaWQgMDtcbmNvbnN0IG5ld3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9uZXdzXCIpKTtcbmNvbnN0IHNvdXJjZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zb3VyY2VzXCIpKTtcbmNsYXNzIEFwcFZpZXcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm5ld3MgPSBuZXcgbmV3c18xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gbmV3IHNvdXJjZXNfMS5kZWZhdWx0KCk7XG4gICAgfVxuICAgIHJlbmRlck5ld3MoZGF0YSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChcImFydGljbGVzXCIgaW4gZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgYXJ0aWNsZXMgPSAoX2EgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuYXJ0aWNsZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdO1xuICAgICAgICAgICAgdGhpcy5uZXdzLnJlbmRlcihhcnRpY2xlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVuZGVyU291cmNlcyhkYXRhKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKFwic291cmNlc1wiIGluIGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZXMgPSAoX2EgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuc291cmNlcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgICAgICB0aGlzLnNvdXJjZXMucmVuZGVyKHNvdXJjZXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BcHBWaWV3ID0gQXBwVmlldztcbmV4cG9ydHMuZGVmYXVsdCA9IEFwcFZpZXc7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHBsYWNlaG9sZGVyX3BuZ18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9hc3NldHMvcGxhY2Vob2xkZXIucG5nXCIpKTtcbmNsYXNzIE5ld3Mge1xuICAgIHJlbmRlcihkYXRhKSB7XG4gICAgICAgIGNvbnN0IGFydGljbGVzID0gZGF0YS5sZW5ndGggPj0gMTAgPyBkYXRhLmZpbHRlcigoXywgaWR4KSA9PiBpZHggPCAxMCkgOiBkYXRhO1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgY29uc3QgbmV3c0l0ZW1UZW1wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuZXdzSXRlbVRlbXBcIiAvKiBTZWxlY3Rvci5OZXdzVGVtcGxhdGUgKi8pO1xuICAgICAgICBjb25zdCBuZXdzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXdzXCIgLyogU2VsZWN0b3IuTmV3c0NvbnRhaW5lciAqLyk7XG4gICAgICAgIGlmICghbmV3c0l0ZW1UZW1wIHx8ICEobmV3c0l0ZW1UZW1wIGluc3RhbmNlb2YgSFRNTFRlbXBsYXRlRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW4ndCBmaW5kIERPTSBlbGVtZW50ICR7XCIjbmV3c0l0ZW1UZW1wXCIgLyogU2VsZWN0b3IuTmV3c1RlbXBsYXRlICovfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmV3c0NvbnRhaW5lcilcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW4ndCBmaW5kIERPTSBlbGVtZW50ICR7XCIubmV3c1wiIC8qIFNlbGVjdG9yLk5ld3NDb250YWluZXIgKi99YCk7XG4gICAgICAgIGFydGljbGVzLmZvckVhY2goKGFydGljbGUsIGlkeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3c0Nsb25lID0gbmV3c0l0ZW1UZW1wLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgaWYgKCFuZXdzQ2xvbmUgfHwgIShuZXdzQ2xvbmUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBGYWlsZWQgdG8gY2xvbmUgJHtuZXdzSXRlbVRlbXB9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXdzSXRlbSA9IG5ld3NDbG9uZS5xdWVyeVNlbGVjdG9yKFwiLm5ld3NfX2l0ZW1cIiAvKiBTZWxlY3Rvci5OZXdzSXRlbSAqLyk7XG4gICAgICAgICAgICBjb25zdCBwaG90byA9IG5ld3NDbG9uZS5xdWVyeVNlbGVjdG9yKFwiLm5ld3NfX21ldGEtcGhvdG9cIiAvKiBTZWxlY3Rvci5QaG90byAqLyk7XG4gICAgICAgICAgICBjb25zdCBhdXRob3IgPSBuZXdzQ2xvbmUucXVlcnlTZWxlY3RvcihcIi5uZXdzX19tZXRhLWF1dGhvclwiIC8qIFNlbGVjdG9yLkF1dGhvciAqLyk7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3c0Nsb25lLnF1ZXJ5U2VsZWN0b3IoXCIubmV3c19fbWV0YS1kYXRlXCIgLyogU2VsZWN0b3IuRGF0ZSAqLyk7XG4gICAgICAgICAgICBjb25zdCB0aXRsZSA9IG5ld3NDbG9uZS5xdWVyeVNlbGVjdG9yKFwiLm5ld3NfX2Rlc2NyaXB0aW9uLXRpdGxlXCIgLyogU2VsZWN0b3IuVGl0bGUgKi8pO1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gbmV3c0Nsb25lLnF1ZXJ5U2VsZWN0b3IoXCIubmV3c19fZGVzY3JpcHRpb24tc291cmNlXCIgLyogU2VsZWN0b3IuU291cmNlICovKTtcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gbmV3c0Nsb25lLnF1ZXJ5U2VsZWN0b3IoXCIubmV3c19fZGVzY3JpcHRpb24tY29udGVudFwiIC8qIFNlbGVjdG9yLkRlc2NyaXB0aW9uICovKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBuZXdzQ2xvbmUucXVlcnlTZWxlY3RvcihcIi5uZXdzX19yZWFkLW1vcmUgYVwiIC8qIFNlbGVjdG9yLkxpbmsgKi8pO1xuICAgICAgICAgICAgaWYgKCFuZXdzSXRlbSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgQ2FuJ3QgZmluZCBET00gZWxlbWVudCAke1wiLm5ld3NfX2l0ZW1cIiAvKiBTZWxlY3Rvci5OZXdzSXRlbSAqL31gKTtcbiAgICAgICAgICAgIGlmICghcGhvdG8pXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENhbid0IGZpbmQgRE9NIGVsZW1lbnQgJHtcIi5uZXdzX19tZXRhLXBob3RvXCIgLyogU2VsZWN0b3IuUGhvdG8gKi99YCk7XG4gICAgICAgICAgICBpZiAoIWF1dGhvcilcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgQ2FuJ3QgZmluZCBET00gZWxlbWVudCAke1wiLm5ld3NfX21ldGEtYXV0aG9yXCIgLyogU2VsZWN0b3IuQXV0aG9yICovfWApO1xuICAgICAgICAgICAgaWYgKCFkYXRlKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW4ndCBmaW5kIERPTSBlbGVtZW50ICR7XCIubmV3c19fbWV0YS1kYXRlXCIgLyogU2VsZWN0b3IuRGF0ZSAqL31gKTtcbiAgICAgICAgICAgIGlmICghdGl0bGUpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENhbid0IGZpbmQgRE9NIGVsZW1lbnQgJHtcIi5uZXdzX19kZXNjcmlwdGlvbi10aXRsZVwiIC8qIFNlbGVjdG9yLlRpdGxlICovfWApO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENhbid0IGZpbmQgRE9NIGVsZW1lbnQgJHtcIi5uZXdzX19kZXNjcmlwdGlvbi1zb3VyY2VcIiAvKiBTZWxlY3Rvci5Tb3VyY2UgKi99YCk7XG4gICAgICAgICAgICBpZiAoIWRlc2NyaXB0aW9uKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW4ndCBmaW5kIERPTSBlbGVtZW50ICR7XCIubmV3c19fZGVzY3JpcHRpb24tY29udGVudFwiIC8qIFNlbGVjdG9yLkRlc2NyaXB0aW9uICovfWApO1xuICAgICAgICAgICAgaWYgKCFsaW5rKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW4ndCBmaW5kIERPTSBlbGVtZW50ICR7XCIubmV3c19fcmVhZC1tb3JlIGFcIiAvKiBTZWxlY3Rvci5MaW5rICovfWApO1xuICAgICAgICAgICAgaWYgKGlkeCAlIDIpXG4gICAgICAgICAgICAgICAgbmV3c0l0ZW0uY2xhc3NMaXN0LmFkZChcImFsdFwiKTtcbiAgICAgICAgICAgIGlmIChwaG90byBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcGhvdG8uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgke2FydGljbGUudXJsVG9JbWFnZSB8fCBwbGFjZWhvbGRlcl9wbmdfMS5kZWZhdWx0fSlgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXV0aG9yLnRleHRDb250ZW50ID0gYXJ0aWNsZS5hdXRob3IgfHwgYXJ0aWNsZS5zb3VyY2UubmFtZTtcbiAgICAgICAgICAgIGRhdGUudGV4dENvbnRlbnQgPSBhcnRpY2xlLnB1Ymxpc2hlZEF0LnNsaWNlKDAsIDEwKS5zcGxpdChcIi1cIikucmV2ZXJzZSgpLmpvaW4oXCItXCIpO1xuICAgICAgICAgICAgdGl0bGUudGV4dENvbnRlbnQgPSBhcnRpY2xlLnRpdGxlO1xuICAgICAgICAgICAgc291cmNlLnRleHRDb250ZW50ID0gYXJ0aWNsZS5zb3VyY2UubmFtZTtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gYXJ0aWNsZS5kZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBhcnRpY2xlLnVybCk7XG4gICAgICAgICAgICBmcmFnbWVudC5hcHBlbmQobmV3c0Nsb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5ld3NDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgbmV3c0NvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTmV3cztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgU291cmNlcyB7XG4gICAgcmVuZGVyKGRhdGEpIHtcbiAgICAgICAgY29uc3Qgc291cmNlcyA9IFsuLi5kYXRhXTtcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIGNvbnN0IHNvdXJjZUl0ZW1UZW1wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzb3VyY2VJdGVtVGVtcFwiIC8qIFNlbGVjdG9yLlNvdXJjZVRlbXBsYXRlICovKTtcbiAgICAgICAgY29uc3Qgc291cmNlc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc291cmNlc1wiIC8qIFNlbGVjdG9yLlNvdXJjZXNDb250YWluZXIgKi8pO1xuICAgICAgICBpZiAoIXNvdXJjZUl0ZW1UZW1wIHx8ICEoc291cmNlSXRlbVRlbXAgaW5zdGFuY2VvZiBIVE1MVGVtcGxhdGVFbGVtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENhbid0IGZpbmQgRE9NIGVsZW1lbnQgJHtcIiNzb3VyY2VJdGVtVGVtcFwiIC8qIFNlbGVjdG9yLlNvdXJjZVRlbXBsYXRlICovfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc291cmNlc0NvbnRhaW5lcilcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW4ndCBmaW5kIERPTSBlbGVtZW50ICR7XCIuc291cmNlc1wiIC8qIFNlbGVjdG9yLlNvdXJjZXNDb250YWluZXIgKi99YCk7XG4gICAgICAgIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VDbG9uZSA9IHNvdXJjZUl0ZW1UZW1wLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2VDbG9uZSB8fCAhKHNvdXJjZUNsb25lIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgRmFpbGVkIHRvIGNsb25lICR7c291cmNlSXRlbVRlbXB9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VJdGVtID0gc291cmNlQ2xvbmUucXVlcnlTZWxlY3RvcihcIi5zb3VyY2VfX2l0ZW1cIiAvKiBTZWxlY3Rvci5Tb3VyY2VJdGVtICovKTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1OYW1lID0gc291cmNlQ2xvbmUucXVlcnlTZWxlY3RvcihcIi5zb3VyY2VfX2l0ZW0tbmFtZVwiIC8qIFNlbGVjdG9yLlNvdXJjZUl0ZW1OYW1lICovKTtcbiAgICAgICAgICAgIGlmICghaXRlbU5hbWUpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENhbid0IGZpbmQgRE9NIGVsZW1lbnQgJHtcIi5zb3VyY2VfX2l0ZW0tbmFtZVwiIC8qIFNlbGVjdG9yLlNvdXJjZUl0ZW1OYW1lICovfWApO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2VJdGVtKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW4ndCBmaW5kIERPTSBlbGVtZW50ICR7XCIuc291cmNlX19pdGVtXCIgLyogU2VsZWN0b3IuU291cmNlSXRlbSAqL31gKTtcbiAgICAgICAgICAgIGl0ZW1OYW1lLnRleHRDb250ZW50ID0gc291cmNlLm5hbWU7XG4gICAgICAgICAgICBzb3VyY2VJdGVtLnNldEF0dHJpYnV0ZShcImRhdGEtc291cmNlLWlkXCIsIHNvdXJjZS5pZCk7XG4gICAgICAgICAgICBmcmFnbWVudC5hcHBlbmQoc291cmNlQ2xvbmUpO1xuICAgICAgICB9KTtcbiAgICAgICAgc291cmNlc0NvbnRhaW5lci5hcHBlbmQoZnJhZ21lbnQpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNvdXJjZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFwcF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvYXBwL2FwcFwiKSk7XG5yZXF1aXJlKFwiLi9nbG9iYWwuY3NzXCIpO1xuY29uc3QgYXBwID0gbmV3IGFwcF8xLmRlZmF1bHQoKTtcbmFwcC5zdGFydCgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkh0dHBTdGF0dXNDb2RlID0gdm9pZCAwO1xudmFyIEh0dHBTdGF0dXNDb2RlO1xuKGZ1bmN0aW9uIChIdHRwU3RhdHVzQ29kZSkge1xuICAgIEh0dHBTdGF0dXNDb2RlW0h0dHBTdGF0dXNDb2RlW1wiVW5hdXRob3JpemVkXCJdID0gNDAxXSA9IFwiVW5hdXRob3JpemVkXCI7XG4gICAgSHR0cFN0YXR1c0NvZGVbSHR0cFN0YXR1c0NvZGVbXCJOb3RGb3VuZFwiXSA9IDQwNF0gPSBcIk5vdEZvdW5kXCI7XG59KShIdHRwU3RhdHVzQ29kZSB8fCAoZXhwb3J0cy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlID0ge30pKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgIXNjcmlwdFVybCkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwNyk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNvbmNhdCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl9pdGVtIiwiaXNBcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwiY2FsbCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsIm9wdGlvbnMiLCJsb2NhbHMiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsImJpbmQiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYWxsIiwiYXRvYiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiZGVmaW5lUHJvcGVydHkiLCJjb250cm9sbGVyXzEiLCJhcHBWaWV3XzEiLCJjb250cm9sbGVyIiwiZGVmYXVsdCIsInZpZXciLCJBcHBWaWV3Iiwic3RhcnQiLCJzb3VyY2VzVGFicyIsImNoaWxkcmVuIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkhUTUxFbGVtZW50IiwidGFyZ2V0Q29udGFpbmVyIiwiY2xvc2VzdCIsInRhYiIsImNsYXNzTGlzdCIsImFkZCIsImdldE5ld3MiLCJyZW5kZXJOZXdzIiwiZ2V0U291cmNlcyIsInJlbmRlclNvdXJjZXMiLCJsb2FkZXJfMSIsIkFwcExvYWRlciIsInN1cGVyIiwiYXBpS2V5IiwiYXBwTG9hZGVyXzEiLCJBcHBDb250cm9sbGVyIiwiY2FsbGJhY2siLCJnZXRSZXNwIiwiZW5kcG9pbnQiLCJuZXdzQ29udGFpbmVyIiwiY3VycmVudFRhcmdldCIsImNvbnRhaW5zIiwic291cmNlSWQiLCJnZXRBdHRyaWJ1dGUiLCJlbnVtc18xIiwiYmFzZUxpbmsiLCJsb2FkIiwiZXJyb3JIYW5kbGVyIiwicmVzIiwib2siLCJzdGF0dXMiLCJIdHRwU3RhdHVzQ29kZSIsIlVuYXV0aG9yaXplZCIsIk5vdEZvdW5kIiwibWVzc2FnZSIsInN0YXR1c1RleHQiLCJtYWtlVXJsIiwidXJsT3B0aW9ucyIsImFzc2lnbiIsInVybCIsIm1ldGhvZCIsImZldGNoIiwidGhlbiIsImpzb24iLCJjYXRjaCIsImNvbnNvbGUiLCJlcnJvciIsIm5ld3NfMSIsInNvdXJjZXNfMSIsIm5ld3MiLCJfYSIsImFydGljbGVzIiwicmVuZGVyIiwicGxhY2Vob2xkZXJfcG5nXzEiLCJfIiwiaWR4IiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwibmV3c0l0ZW1UZW1wIiwiSFRNTFRlbXBsYXRlRWxlbWVudCIsImFydGljbGUiLCJuZXdzQ2xvbmUiLCJjbG9uZU5vZGUiLCJEb2N1bWVudEZyYWdtZW50IiwibmV3c0l0ZW0iLCJwaG90byIsImF1dGhvciIsImRhdGUiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwibGluayIsImJhY2tncm91bmRJbWFnZSIsInVybFRvSW1hZ2UiLCJ0ZXh0Q29udGVudCIsInB1Ymxpc2hlZEF0Iiwic3BsaXQiLCJyZXZlcnNlIiwiYXBwZW5kIiwiaW5uZXJIVE1MIiwic291cmNlSXRlbVRlbXAiLCJzb3VyY2VzQ29udGFpbmVyIiwic291cmNlQ2xvbmUiLCJzb3VyY2VJdGVtIiwiaXRlbU5hbWUiLCJhcHBfMSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkIiwiYSIsImRlZmluaXRpb24iLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsInIiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsIm5jIl0sInNvdXJjZVJvb3QiOiIifQ==