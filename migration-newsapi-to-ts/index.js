(()=>{"use strict";var n={767:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(15),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=JetBrains+Mono:wght@300;400;500;600;700&display=swap);"]),a.push([n.id,':root {\n  --black: #17181c;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  width: 100%;\n  min-height: 100vh;\n  height: 100%;\n  color: #fff;\n  background: var(--black);\n  font-family: "Inter", sans-serif;\n  font-family: "JetBrains Mono", monospace;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  padding: 10px 20px;\n  background-color: var(--black);\n  z-index: 100;\n}\n\nheader h1 {\n  font-size: 32px;\n  font-weight: 800;\n}\n\nfooter {\n  width: 100%;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  color: #fff;\n}\n\nfooter .copyright {\n  font-size: 14px;\n  color: inherit;\n  text-align: right;\n}\n\nfooter .copyright a {\n  display: inline-block;\n  color: inherit;\n  text-decoration: none;\n  transform: translateY(0);\n\n  transition: all 0.4s ease-in-out;\n  cursor: pointer;\n}\n\nfooter .copyright a:hover {\n  color: inherit;\n  opacity: 0.4;\n  transform: translateY(-0.25em);\n}\n\nfooter .copyright:before {\n  content: "© ";\n}\n\nmain {\n  position: relative;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  padding: 60px 20px;\n  flex: 1;\n}\n\n/* SOURCES */\n\n.sources {\n  position: fixed;\n  width: 30vw;\n  height: 100vh;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: flex-start;\n  gap: 2px;\n  padding: 20px 0 180px;\n\n  font-family: "JetBrains Mono", monospace;\n}\n\n.source__item {\n  font: inherit;\n  line-height: 1;\n  color: #fff;\n\n  transition: all 0.4s ease-in-out;\n  cursor: pointer;\n}\n\n.source__item:hover,\n.source__item:focus {\n  opacity: 0.4;\n  transform: translateY(-0.25em);\n}\n\n.active {\n  color: red;\n}\n\n.source__item.active:hover,\n.source__item.active:focus {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n/* NEWS */\n\n.news {\n  padding: 20px 0;\n  width: 70vw;\n  position: relative;\n  margin-left: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.news__item {\n  /* max-width: 900px; */\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n\n  color: var(--black);\n  font-family: "Inter", monospace;\n  line-height: 1.2;\n\n  background: #fff;\n  border: 2px solid var(--black);\n  border-radius: 0;\n  overflow: hidden;\n\n  transition: border 0.5s;\n}\n\n.news__item.alt {\n  flex-direction: row-reverse;\n}\n\n.news__item:hover {\n  border: 2px solid red;\n}\n\n.news__item .news__meta {\n  position: relative;\n  width: 40%;\n  height: auto;\n}\n\n.news__item .news__meta-photo {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-size: cover;\n  background-position: center;\n  -webkit-filter: grayscale(100%);\n  filter: grayscale(100%);\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n  margin: auto;\n  padding: 0;\n  list-style: none;\n  font-family: "JetBrains Mono", monospace;\n}\n\n.news__item .news__meta-details {\n  width: 100%;\n  padding: 10px;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: -120%;\n  /* margin: auto; */\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  font-size: 14px;\n\n  transition: left 0.5s ease-in-out;\n}\n\n.news__item .news__description {\n  width: 60%;\n  padding: 1rem;\n  background: #fff;\n  position: relative;\n  z-index: 1;\n}\n\n.news__item .news__description h2 {\n  line-height: 1;\n  margin: 0;\n  font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n  font-size: 14px;\n  font-weight: 300;\n  text-transform: uppercase;\n  color: #a2a2a2;\n  margin-top: 10px;\n}\n\n.news__item .news__description .news__read-more {\n  text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n  color: red;\n  display: inline-block;\n  position: relative;\n  text-decoration: none;\n  font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n  content: "→";\n  margin-left: -10px;\n  opacity: 0;\n  vertical-align: middle;\n\n  transition: margin 0.35s ease-in-out, opacity 0.35s ease-in-out;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n  margin-left: 5px;\n  opacity: 1;\n}\n\n.news__item p:first-of-type {\n  margin-top: 1.25rem;\n  position: relative;\n}\n\n.news__item:hover .news__meta-details {\n  left: 0%;\n}\n\n/* QUERIES */\n\n@media all and (max-width: 780px) {\n  header {\n    padding: 20px;\n  }\n\n  main {\n    flex-direction: column;\n  }\n\n  .sources {\n    width: 100%;\n    height: 40px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    overflow: auto;\n    align-items: center;\n    gap: 20px;\n    background-color: var(--black);\n\n    padding: 20px 0;\n    z-index: 100;\n  }\n\n  .source__item-name {\n    white-space: nowrap;\n  }\n\n  .news {\n    width: 100%;\n    padding-top: 60px;\n  }\n}\n\n@media all and (max-width: 560px) {\n  .news__item,\n  .news__item.alt {\n    flex-direction: column;\n  }\n\n  .news__item .news__meta {\n    width: 100%;\n    height: 240px;\n  }\n\n  .news__item .news__description {\n    width: 100%;\n  }\n\n  .news__item.alt .news__meta-details {\n    padding-left: 10px;\n  }\n}\n',"",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=JetBrains+Mono:wght@300;400;500;600;700&display=swap");\n\n:root {\n  --black: #17181c;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  width: 100%;\n  min-height: 100vh;\n  height: 100%;\n  color: #fff;\n  background: var(--black);\n  font-family: "Inter", sans-serif;\n  font-family: "JetBrains Mono", monospace;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  padding: 10px 20px;\n  background-color: var(--black);\n  z-index: 100;\n}\n\nheader h1 {\n  font-size: 32px;\n  font-weight: 800;\n}\n\nfooter {\n  width: 100%;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  color: #fff;\n}\n\nfooter .copyright {\n  font-size: 14px;\n  color: inherit;\n  text-align: right;\n}\n\nfooter .copyright a {\n  display: inline-block;\n  color: inherit;\n  text-decoration: none;\n  transform: translateY(0);\n\n  transition: all 0.4s ease-in-out;\n  cursor: pointer;\n}\n\nfooter .copyright a:hover {\n  color: inherit;\n  opacity: 0.4;\n  transform: translateY(-0.25em);\n}\n\nfooter .copyright:before {\n  content: "© ";\n}\n\nmain {\n  position: relative;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  padding: 60px 20px;\n  flex: 1;\n}\n\n/* SOURCES */\n\n.sources {\n  position: fixed;\n  width: 30vw;\n  height: 100vh;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: flex-start;\n  gap: 2px;\n  padding: 20px 0 180px;\n\n  font-family: "JetBrains Mono", monospace;\n}\n\n.source__item {\n  font: inherit;\n  line-height: 1;\n  color: #fff;\n\n  transition: all 0.4s ease-in-out;\n  cursor: pointer;\n}\n\n.source__item:hover,\n.source__item:focus {\n  opacity: 0.4;\n  transform: translateY(-0.25em);\n}\n\n.active {\n  color: red;\n}\n\n.source__item.active:hover,\n.source__item.active:focus {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n/* NEWS */\n\n.news {\n  padding: 20px 0;\n  width: 70vw;\n  position: relative;\n  margin-left: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.news__item {\n  /* max-width: 900px; */\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n\n  color: var(--black);\n  font-family: "Inter", monospace;\n  line-height: 1.2;\n\n  background: #fff;\n  border: 2px solid var(--black);\n  border-radius: 0;\n  overflow: hidden;\n\n  transition: border 0.5s;\n}\n\n.news__item.alt {\n  flex-direction: row-reverse;\n}\n\n.news__item:hover {\n  border: 2px solid red;\n}\n\n.news__item .news__meta {\n  position: relative;\n  width: 40%;\n  height: auto;\n}\n\n.news__item .news__meta-photo {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-size: cover;\n  background-position: center;\n  -webkit-filter: grayscale(100%);\n  filter: grayscale(100%);\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n  margin: auto;\n  padding: 0;\n  list-style: none;\n  font-family: "JetBrains Mono", monospace;\n}\n\n.news__item .news__meta-details {\n  width: 100%;\n  padding: 10px;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: -120%;\n  /* margin: auto; */\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  font-size: 14px;\n\n  transition: left 0.5s ease-in-out;\n}\n\n.news__item .news__description {\n  width: 60%;\n  padding: 1rem;\n  background: #fff;\n  position: relative;\n  z-index: 1;\n}\n\n.news__item .news__description h2 {\n  line-height: 1;\n  margin: 0;\n  font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n  font-size: 14px;\n  font-weight: 300;\n  text-transform: uppercase;\n  color: #a2a2a2;\n  margin-top: 10px;\n}\n\n.news__item .news__description .news__read-more {\n  text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n  color: red;\n  display: inline-block;\n  position: relative;\n  text-decoration: none;\n  font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n  content: "→";\n  margin-left: -10px;\n  opacity: 0;\n  vertical-align: middle;\n\n  transition: margin 0.35s ease-in-out, opacity 0.35s ease-in-out;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n  margin-left: 5px;\n  opacity: 1;\n}\n\n.news__item p:first-of-type {\n  margin-top: 1.25rem;\n  position: relative;\n}\n\n.news__item:hover .news__meta-details {\n  left: 0%;\n}\n\n/* QUERIES */\n\n@media all and (max-width: 780px) {\n  header {\n    padding: 20px;\n  }\n\n  main {\n    flex-direction: column;\n  }\n\n  .sources {\n    width: 100%;\n    height: 40px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    overflow: auto;\n    align-items: center;\n    gap: 20px;\n    background-color: var(--black);\n\n    padding: 20px 0;\n    z-index: 100;\n  }\n\n  .source__item-name {\n    white-space: nowrap;\n  }\n\n  .news {\n    width: 100%;\n    padding-top: 60px;\n  }\n}\n\n@media all and (max-width: 560px) {\n  .news__item,\n  .news__item.alt {\n    flex-direction: column;\n  }\n\n  .news__item .news__meta {\n    width: 100%;\n    height: 240px;\n  }\n\n  .news__item .news__description {\n    width: 100%;\n  }\n\n  .news__item.alt .news__meta-details {\n    padding-left: 10px;\n  }\n}\n'],sourceRoot:""}]);const A=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var A=0;A<n.length;A++){var s=[].concat(n[A]);r&&o[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var r,o,i=[],a=!0,A=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(n){A=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(A)throw o}}return i}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if(!a)return i;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),c="/*# ".concat(s," */"),l=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},427:(n,e,t)=>{t.r(e),t.d(e,{default:()=>a});var r=t(379),o=t.n(r),i=t(767);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},379:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),i=[];function a(n){for(var e=-1,t=0;t<i.length;t++)if(i[t].identifier===n){e=t;break}return e}function A(n,e){for(var t={},r=[],o=0;o<n.length;o++){var A=n[o],s=e.base?A[0]+e.base:A[0],c=t[s]||0,l="".concat(s," ").concat(c);t[s]=c+1;var d=a(l),f={css:A[1],media:A[2],sourceMap:A[3]};-1!==d?(i[d].references++,i[d].updater(f)):i.push({identifier:l,updater:m(f,e),references:1}),r.push(l)}return r}function s(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var a=o(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,l=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function d(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function f(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var u=null,p=0;function m(n,e){var t,r,o;if(e.singleton){var i=p++;t=u||(u=s(e)),r=d.bind(null,t,i,!1),o=d.bind(null,t,i,!0)}else t=s(e),r=f.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=A(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=a(t[r]);i[o].references--}for(var s=A(n,e),c=0;c<t.length;c++){var l=a(t[c]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}t=s}}}},717:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(842)),i=t(527);e.default=class{constructor(){this.controller=new o.default,this.view=new i.AppView}start(){const n=document.querySelector(".sources");if(!n)throw Error("Can't find DOM element .sources");const e=n.children;if(!e)throw Error("Can't find children of .sources");n.addEventListener("click",(n=>{const t=n.target;if(!t)throw Error("Can't find e.target element.");if(!(t instanceof HTMLElement))return;const r=t.closest(".source__item");if(!r)throw Error("Can't find DOM element .source__item.");[...e].forEach((n=>n.classList.remove("active"))),r.classList.add("active"),this.controller.getNews(n,(n=>this.view.renderNews(n)))})),this.controller.getSources((n=>this.view.renderSources(n)))}}},853:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(24));class i extends o.default{constructor(){super("https://rss-news-api.onrender.com/",{apiKey:"75c1cc08fa9141c3a35d0fc4d548f8d1"})}}e.default=i},842:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(853));class i extends o.default{getSources(n){super.getResp({endpoint:"sources"},n)}getNews(n,e){let t=n.target;const r=n.currentTarget;if(!t)throw Error("Can't find e.target element.");if(!r)throw Error("Can't find e.currentTarget element.");for(;t!==r;){if(t instanceof HTMLElement&&t.classList.contains("source__item")){const n=t.getAttribute("data-source-id")||"";return void(r instanceof HTMLElement&&r.getAttribute("data-source")!==n&&(r.setAttribute("data-source",n),super.getResp({endpoint:"everything",options:{sources:n}},e)))}t instanceof HTMLElement&&null!==t&&(t=t.parentNode)}}}e.default=i},24:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0});const r=t(130);e.default=class{constructor(n,e){this.baseLink=n,this.options=e}getResp({endpoint:n,options:e},t){this.load("GET",n,t,null!=e?e:{})}errorHandler(n){if(!n.ok){if(n.status===r.HttpStatusCode.Unauthorized||n.status===r.HttpStatusCode.NotFound){const e=`Sorry, but there is ${n.status} error: ${n.statusText}`;throw Error(e)}throw Error(n.statusText)}return n}makeUrl(n,e){const t=Object.assign(Object.assign({},this.options),n);let r=`${this.baseLink}${e}?`;return Object.keys(t).forEach((n=>{r+=`${n}=${t[n]}&`})),r.slice(0,-1)}load(n,e,t,r){fetch(this.makeUrl(r,e),{method:n}).then(this.errorHandler).then((n=>n.json())).then((n=>t(n))).catch((n=>console.error(n)))}}},527:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0}),e.AppView=void 0;const o=r(t(591)),i=r(t(710));class a{constructor(){this.news=new o.default,this.sources=new i.default}renderNews(n){var e;if("articles"in n){const t=null!==(e=null==n?void 0:n.articles)&&void 0!==e?e:[];this.news.render(t)}}renderSources(n){var e;if("sources"in n){const t=null!==(e=null==n?void 0:n.sources)&&void 0!==e?e:[];this.sources.render(t)}}}e.AppView=a,e.default=a},591:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(698));e.default=class{render(n){const e=n.length>=10?n.filter(((n,e)=>e<10)):n,t=document.createDocumentFragment(),r=document.querySelector("#newsItemTemp"),i=document.querySelector(".news");if(!(r&&r instanceof HTMLTemplateElement))throw Error("Can't find DOM element #newsItemTemp");if(!i)throw Error("Can't find DOM element .news");e.forEach(((n,e)=>{const i=r.content.cloneNode(!0);if(!(i&&i instanceof DocumentFragment))throw Error(`Failed to clone ${r}`);const a=i.querySelector(".news__item"),A=i.querySelector(".news__meta-photo"),s=i.querySelector(".news__meta-author"),c=i.querySelector(".news__meta-date"),l=i.querySelector(".news__description-title"),d=i.querySelector(".news__description-source"),f=i.querySelector(".news__description-content"),u=i.querySelector(".news__read-more a");if(!a)throw Error("Can't find DOM element .news__item");if(!A)throw Error("Can't find DOM element .news__meta-photo");if(!s)throw Error("Can't find DOM element .news__meta-author");if(!c)throw Error("Can't find DOM element .news__meta-date");if(!l)throw Error("Can't find DOM element .news__description-title");if(!d)throw Error("Can't find DOM element .news__description-source");if(!f)throw Error("Can't find DOM element .news__description-content");if(!u)throw Error("Can't find DOM element .news__read-more a");e%2&&a.classList.add("alt"),A instanceof HTMLElement&&(A.style.backgroundImage=`url(${n.urlToImage||o.default})`),s.textContent=n.author||n.source.name,c.textContent=n.publishedAt.slice(0,10).split("-").reverse().join("-"),l.textContent=n.title,d.textContent=n.source.name,f.textContent=n.description,u.setAttribute("href",n.url),t.append(i)})),i.innerHTML="",i.appendChild(t)}}},710:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{render(n){const e=[...n],t=document.createDocumentFragment(),r=document.querySelector("#sourceItemTemp"),o=document.querySelector(".sources");if(!(r&&r instanceof HTMLTemplateElement))throw Error("Can't find DOM element #sourceItemTemp");if(!o)throw Error("Can't find DOM element .sources");e.forEach((n=>{const e=r.content.cloneNode(!0);if(!(e&&e instanceof DocumentFragment))throw Error(`Failed to clone ${r}`);const o=e.querySelector(".source__item"),i=e.querySelector(".source__item-name");if(!i)throw Error("Can't find DOM element .source__item-name");if(!o)throw Error("Can't find DOM element .source__item");i.textContent=n.name,o.setAttribute("data-source-id",n.id),t.append(e)})),o.append(t)}}},607:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(717));t(427),(new o.default).start()},130:(n,e)=>{var t;Object.defineProperty(e,"__esModule",{value:!0}),e.HttpStatusCode=void 0,function(n){n[n.Unauthorized=401]="Unauthorized",n[n.NotFound=404]="NotFound"}(t||(e.HttpStatusCode=t={}))},698:(n,e,t)=>{n.exports=t.p+"0505019b0de830b4c2c7.png"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r].call(i.exports,i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!n;)n=r[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,t(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,