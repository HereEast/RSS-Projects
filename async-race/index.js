(()=>{"use strict";var n={4127:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r)()(o());i.push([n.id,"button {\n  border: 0;\n  outline: 0;\n  font-family: var(--font);\n  font-size: var(--button-font-size);\n  color: var(--black);\n  height: 30px;\n  padding: 0 15px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n\n  background-color: var(--white);\n  border-radius: 30px;\n  text-transform: uppercase;\n\n  position: relative;\n  z-index: 100;\n  user-select: none;\n  cursor: pointer;\n\n  transition: all 0.2s ease-in;\n}\n\nbutton:not(.button__view):hover {\n  opacity: 1;\n  background-color: var(--button-hover-white);\n}\n\n.button__view {\n  width: 120px;\n  height: 60px;\n  background-color: transparent;\n  color: var(--white);\n  font-size: 18px;\n  text-transform: capitalize;\n\n  transition: color 0.2s ease-in;\n}\n\n.button__view.active {\n  color: var(--black);\n  cursor: default;\n}\n\nform button {\n  padding: 0 15px;\n  text-transform: uppercase;\n  font-size: 12px;\n}\n\n.button__cancel,\n.button__reset,\n.button__page {\n  background-color: transparent;\n  border: 1px solid var(--white);\n  color: var(--white);\n}\n\n.button__cancel:hover,\n.button__reset:hover,\n.button__page:hover {\n  background-color: var(--white);\n  color: var(--black);\n}\n\n.button__race {\n  background-color: var(--green);\n}\n\nbutton.button__race:hover {\n  background-color: var(--button-hover-primary);\n}\n\n.button__page {\n  height: 20px;\n  padding: 0 10px;\n}\n\n.button__page--disabled {\n  cursor: default;\n  opacity: 0.5;\n}\n\nbutton.button__page--disabled:hover {\n  cursor: default;\n  opacity: 0.5;\n  background-color: transparent;\n  color: var(--white);\n}\n\n/* Track */\n.button__track {\n  font-size: 14px;\n  text-transform: capitalize;\n  background-color: transparent;\n  color: var(--track-button-color);\n\n  padding: 0 5px;\n  height: 20px;\n}\n\nbutton.button__track:hover {\n  color: var(--white);\n  background-color: var(--black-light);\n}\n\nbutton.button__track:disabled,\nbutton.button__track:disabled {\n  cursor: default;\n  background-color: transparent;\n  color: var(--track-button-color);\n}\n\n/**/\n\n@media all and (max-width: 720px) {\n  .button__view {\n    width: 50%;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/components/buttons.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,wBAAwB;EACxB,kCAAkC;EAClC,mBAAmB;EACnB,YAAY;EACZ,eAAe;;EAEf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,cAAc;;EAEd,8BAA8B;EAC9B,mBAAmB;EACnB,yBAAyB;;EAEzB,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;EACjB,eAAe;;EAEf,4BAA4B;AAC9B;;AAEA;EACE,UAAU;EACV,2CAA2C;AAC7C;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,6BAA6B;EAC7B,mBAAmB;EACnB,eAAe;EACf,0BAA0B;;EAE1B,8BAA8B;AAChC;;AAEA;EACE,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,yBAAyB;EACzB,eAAe;AACjB;;AAEA;;;EAGE,6BAA6B;EAC7B,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;;;EAGE,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,6CAA6C;AAC/C;;AAEA;EACE,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,YAAY;AACd;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA,UAAU;AACV;EACE,eAAe;EACf,0BAA0B;EAC1B,6BAA6B;EAC7B,gCAAgC;;EAEhC,cAAc;EACd,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,oCAAoC;AACtC;;AAEA;;EAEE,eAAe;EACf,6BAA6B;EAC7B,gCAAgC;AAClC;;AAEA,GAAG;;AAEH;EACE;IACE,UAAU;EACZ;AACF",sourcesContent:["button {\n  border: 0;\n  outline: 0;\n  font-family: var(--font);\n  font-size: var(--button-font-size);\n  color: var(--black);\n  height: 30px;\n  padding: 0 15px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n\n  background-color: var(--white);\n  border-radius: 30px;\n  text-transform: uppercase;\n\n  position: relative;\n  z-index: 100;\n  user-select: none;\n  cursor: pointer;\n\n  transition: all 0.2s ease-in;\n}\n\nbutton:not(.button__view):hover {\n  opacity: 1;\n  background-color: var(--button-hover-white);\n}\n\n.button__view {\n  width: 120px;\n  height: 60px;\n  background-color: transparent;\n  color: var(--white);\n  font-size: 18px;\n  text-transform: capitalize;\n\n  transition: color 0.2s ease-in;\n}\n\n.button__view.active {\n  color: var(--black);\n  cursor: default;\n}\n\nform button {\n  padding: 0 15px;\n  text-transform: uppercase;\n  font-size: 12px;\n}\n\n.button__cancel,\n.button__reset,\n.button__page {\n  background-color: transparent;\n  border: 1px solid var(--white);\n  color: var(--white);\n}\n\n.button__cancel:hover,\n.button__reset:hover,\n.button__page:hover {\n  background-color: var(--white);\n  color: var(--black);\n}\n\n.button__race {\n  background-color: var(--green);\n}\n\nbutton.button__race:hover {\n  background-color: var(--button-hover-primary);\n}\n\n.button__page {\n  height: 20px;\n  padding: 0 10px;\n}\n\n.button__page--disabled {\n  cursor: default;\n  opacity: 0.5;\n}\n\nbutton.button__page--disabled:hover {\n  cursor: default;\n  opacity: 0.5;\n  background-color: transparent;\n  color: var(--white);\n}\n\n/* Track */\n.button__track {\n  font-size: 14px;\n  text-transform: capitalize;\n  background-color: transparent;\n  color: var(--track-button-color);\n\n  padding: 0 5px;\n  height: 20px;\n}\n\nbutton.button__track:hover {\n  color: var(--white);\n  background-color: var(--black-light);\n}\n\nbutton.button__track:disabled,\nbutton.button__track:disabled {\n  cursor: default;\n  background-color: transparent;\n  color: var(--track-button-color);\n}\n\n/**/\n\n@media all and (max-width: 720px) {\n  .button__view {\n    width: 50%;\n  }\n}\n"],sourceRoot:""}]);const A=i},1076:(n,e,t)=>{t.d(e,{Z:()=>p});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r),A=t(1667),s=t.n(A),c=t(6140),l=i()(o()),d=s()(c);l.push([n.id,".forms__container {\n  max-width: 530px;\n  width: 100%;\n  position: relative;\n  display: flex;\n}\n\n.forms__container.forms--hidden {\n  visibility: hidden;\n  opacity: 0;\n}\n\n.forms__container form {\n  width: 100%;\n  background-color: var(--black-light);\n  border-radius: 30px;\n}\n\nform {\n  display: flex;\n  justify-content: space-between;\n}\n\nform .form__container {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  gap: 5px;\n}\n\n.form__create {\n  padding: 15px;\n}\n\n.form__create span {\n  width: 3px;\n  height: 30px;\n  background-image: url("+d+");\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.2;\n\n  margin: 0 15px;\n  display: flex;\n  flex-shrink: 0;\n}\n\n.form__update {\n  padding: 15px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 100;\n\n  box-shadow: 10px 10px 10px var(--shadow);\n\n  transform: translateY(-200%);\n  transition: all 0.3s ease-in-out;\n}\n\n.form__update--open {\n  transform: translateY(0);\n}\n\n.form__update h2 {\n  font-size: 24px;\n  font-weight: 400;\n  margin-bottom: 10px;\n}\n\n/**/\n\n@media all and (max-width: 720px) {\n  .forms__container {\n    max-width: 720px;\n    width: 100%;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/components/forms.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,WAAW;EACX,kBAAkB;EAClB,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,WAAW;EACX,oCAAoC;EACpC,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,WAAW;EACX,aAAa;EACb,8BAA8B;EAC9B,QAAQ;AACV;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,UAAU;EACV,YAAY;EACZ,yDAAsD;EACtD,wBAAwB;EACxB,2BAA2B;EAC3B,4BAA4B;EAC5B,YAAY;;EAEZ,cAAc;EACd,aAAa;EACb,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,2BAA2B;EAC3B,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,YAAY;;EAEZ,wCAAwC;;EAExC,4BAA4B;EAC5B,gCAAgC;AAClC;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA,GAAG;;AAEH;EACE;IACE,gBAAgB;IAChB,WAAW;EACb;AACF",sourcesContent:['.forms__container {\n  max-width: 530px;\n  width: 100%;\n  position: relative;\n  display: flex;\n}\n\n.forms__container.forms--hidden {\n  visibility: hidden;\n  opacity: 0;\n}\n\n.forms__container form {\n  width: 100%;\n  background-color: var(--black-light);\n  border-radius: 30px;\n}\n\nform {\n  display: flex;\n  justify-content: space-between;\n}\n\nform .form__container {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  gap: 5px;\n}\n\n.form__create {\n  padding: 15px;\n}\n\n.form__create span {\n  width: 3px;\n  height: 30px;\n  background-image: url("../../assets/dots-dividor.svg");\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.2;\n\n  margin: 0 15px;\n  display: flex;\n  flex-shrink: 0;\n}\n\n.form__update {\n  padding: 15px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 100;\n\n  box-shadow: 10px 10px 10px var(--shadow);\n\n  transform: translateY(-200%);\n  transition: all 0.3s ease-in-out;\n}\n\n.form__update--open {\n  transform: translateY(0);\n}\n\n.form__update h2 {\n  font-size: 24px;\n  font-weight: 400;\n  margin-bottom: 10px;\n}\n\n/**/\n\n@media all and (max-width: 720px) {\n  .forms__container {\n    max-width: 720px;\n    width: 100%;\n  }\n}\n'],sourceRoot:""}]);const p=l},1645:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r)()(o());i.push([n.id,"input {\n  outline: none;\n  border: none;\n  height: 30px;\n\n  transition: all 0.1s ease-in;\n}\n\n.input-text {\n  max-width: 500px;\n  width: 100%;\n  padding: 0 15px;\n\n  border-radius: 30px;\n  border: 1px solid var(--input-border);\n  background-color: transparent;\n}\n\n.input-text:focus {\n  color: var(--white);\n  border: 1px solid var(--white);\n}\n\n.input-color {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  background-color: transparent;\n  width: 34px;\n  height: 30px;\n  border: none;\n  cursor: pointer;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n\n  margin-top: -4px;\n}\n\n.input-color::-webkit-color-swatch {\n  display: block;\n  width: 30px;\n  height: 28px;\n  border-radius: 30px;\n  border: 1px solid var(--white);\n}\n\n.input-color::-moz-color-swatch {\n  border-radius: 30px;\n  border: 1px solid var(--white);\n}\n\n","",{version:3,sources:["webpack://./src/styles/components/input.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,YAAY;EACZ,YAAY;;EAEZ,4BAA4B;AAC9B;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,eAAe;;EAEf,mBAAmB;EACnB,qCAAqC;EACrC,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,wBAAwB;EACxB,qBAAqB;EACrB,gBAAgB;EAChB,6BAA6B;EAC7B,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,eAAe;;EAEf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,cAAc;;EAEd,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,mBAAmB;EACnB,8BAA8B;AAChC",sourcesContent:["input {\n  outline: none;\n  border: none;\n  height: 30px;\n\n  transition: all 0.1s ease-in;\n}\n\n.input-text {\n  max-width: 500px;\n  width: 100%;\n  padding: 0 15px;\n\n  border-radius: 30px;\n  border: 1px solid var(--input-border);\n  background-color: transparent;\n}\n\n.input-text:focus {\n  color: var(--white);\n  border: 1px solid var(--white);\n}\n\n.input-color {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  background-color: transparent;\n  width: 34px;\n  height: 30px;\n  border: none;\n  cursor: pointer;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n\n  margin-top: -4px;\n}\n\n.input-color::-webkit-color-swatch {\n  display: block;\n  width: 30px;\n  height: 28px;\n  border-radius: 30px;\n  border: 1px solid var(--white);\n}\n\n.input-color::-moz-color-swatch {\n  border-radius: 30px;\n  border: 1px solid var(--white);\n}\n\n"],sourceRoot:""}]);const A=i},7394:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r)()(o());i.push([n.id,".pagination {\n  width: 200px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  margin-top: 15px;\n}\n\n.page__container {\n  display: flex;\n  gap: 5px;\n}\n\n.page__container span {\n  font-size: 12px;\n  text-transform: uppercase;\n}\n\n.pages__buttons {\n  display: flex;\n  gap: 5px;\n}\n","",{version:3,sources:["webpack://./src/styles/components/pagination.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;;EAEnB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,QAAQ;AACV;;AAEA;EACE,eAAe;EACf,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,QAAQ;AACV",sourcesContent:[".pagination {\n  width: 200px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  margin-top: 15px;\n}\n\n.page__container {\n  display: flex;\n  gap: 5px;\n}\n\n.page__container span {\n  font-size: 12px;\n  text-transform: uppercase;\n}\n\n.pages__buttons {\n  display: flex;\n  gap: 5px;\n}\n"],sourceRoot:""}]);const A=i},5939:(n,e,t)=>{t.d(e,{Z:()=>g});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r),A=t(1667),s=t.n(A),c=t(6191),l=t(3233),d=i()(o()),p=s()(c),u=s()(l);d.push([n.id,'.track {\n  position: relative;\n  border-top: 1px solid var(--white);\n}\n\n.track:last-child {\n  border-bottom: 1px solid var(--white);\n}\n\n.track__container {\n  padding: 10px 0;\n  position: relative;\n}\n\n.track__header {\n  display: flex;\n  gap: 7px;\n  align-items: center;\n\n  position: absolute;\n  margin-top: -5px;\n}\n\n.track__buttons {\n  display: flex;\n  gap: 4px;\n  margin-left: -2px;\n}\n\n.car__name {\n  position: relative;\n  padding-left: 16px;\n}\n\n.car__name::before {\n  content: "";\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background-image: url('+p+");\n  background-position: center;\n  background-size: contain;\n  background-repeat: no-repeat;\n  left: 0;\n  top: 5px;\n}\n\n/* BODY */\n\n.track__body {\n  width: 100%;\n  position: relative;\n  height: 65px;\n  display: flex;\n  align-items: flex-end;\n}\n\n.car {\n  width: 40px;\n  height: 40px;\n  position: absolute;\n  z-index: 100;\n}\n\n.car svg {\n  border-radius: 50%;\n}\n\n.flag {\n  width: 30px;\n  height: 65px;\n  background-image: url("+u+");\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n\n  position: absolute;\n  right: 40px;\n  bottom: 0;\n}","",{version:3,sources:["webpack://./src/styles/components/track.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA;EACE,qCAAqC;AACvC;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,QAAQ;EACR,mBAAmB;;EAEnB,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,QAAQ;EACR,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,yDAAqD;EACrD,2BAA2B;EAC3B,wBAAwB;EACxB,4BAA4B;EAC5B,OAAO;EACP,QAAQ;AACV;;AAEA,SAAS;;AAET;EACE,WAAW;EACX,kBAAkB;EAClB,YAAY;EACZ,aAAa;EACb,qBAAqB;AACvB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,yDAAgD;EAChD,wBAAwB;EACxB,2BAA2B;EAC3B,4BAA4B;;EAE5B,kBAAkB;EAClB,WAAW;EACX,SAAS;AACX",sourcesContent:['.track {\n  position: relative;\n  border-top: 1px solid var(--white);\n}\n\n.track:last-child {\n  border-bottom: 1px solid var(--white);\n}\n\n.track__container {\n  padding: 10px 0;\n  position: relative;\n}\n\n.track__header {\n  display: flex;\n  gap: 7px;\n  align-items: center;\n\n  position: absolute;\n  margin-top: -5px;\n}\n\n.track__buttons {\n  display: flex;\n  gap: 4px;\n  margin-left: -2px;\n}\n\n.car__name {\n  position: relative;\n  padding-left: 16px;\n}\n\n.car__name::before {\n  content: "";\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background-image: url("../../assets/arrow-right.svg");\n  background-position: center;\n  background-size: contain;\n  background-repeat: no-repeat;\n  left: 0;\n  top: 5px;\n}\n\n/* BODY */\n\n.track__body {\n  width: 100%;\n  position: relative;\n  height: 65px;\n  display: flex;\n  align-items: flex-end;\n}\n\n.car {\n  width: 40px;\n  height: 40px;\n  position: absolute;\n  z-index: 100;\n}\n\n.car svg {\n  border-radius: 50%;\n}\n\n.flag {\n  width: 30px;\n  height: 65px;\n  background-image: url("../../assets/finish.svg");\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n\n  position: absolute;\n  right: 40px;\n  bottom: 0;\n}'],sourceRoot:""}]);const g=d},7348:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r)()(o());i.push([n.id,".footer {\n  width: 100%;\n  padding: var(--page-padding);\n}\n\n.footer__container {\n  width: 100%;\n  height: 30px;\n  padding: 0 15px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  background-color: var(--black-light);\n  border-radius: 30px;\n}\n\n.footer__container .footer__info {\n  display: flex;\n  gap: 5px;\n}\n\n/**/\n\n@media all and (max-width: 550px) {\n  .footer {\n    padding-bottom: 20px;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/footer.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,4BAA4B;AAC9B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;;EAEnB,oCAAoC;EACpC,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,QAAQ;AACV;;AAEA,GAAG;;AAEH;EACE;IACE,oBAAoB;EACtB;AACF",sourcesContent:[".footer {\n  width: 100%;\n  padding: var(--page-padding);\n}\n\n.footer__container {\n  width: 100%;\n  height: 30px;\n  padding: 0 15px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  background-color: var(--black-light);\n  border-radius: 30px;\n}\n\n.footer__container .footer__info {\n  display: flex;\n  gap: 5px;\n}\n\n/**/\n\n@media all and (max-width: 550px) {\n  .footer {\n    padding-bottom: 20px;\n  }\n}\n"],sourceRoot:""}]);const A=i},3497:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r)()(o());i.push([n.id,".header {\n  width: 100%;\n  background-color: var(--black);\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 1000;\n}\n\n.header__container {\n  width: 100%;\n  padding: var(--page-padding);\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n.header__buttons {\n  display: flex;\n  position: relative;\n  border-radius: 60px;\n\n  cursor: pointer;\n  transition: all 0.2s ease-in;\n}\n\n.header__buttons:hover {\n  background-color: var(--black-light);\n}\n\n.bubble {\n  display: block;\n  width: 50%;\n  height: 60px;\n  border-radius: 60px;\n  background-color: var(--white);\n\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  transition: all 0.2s ease-in-out;\n}\n\n.bubble.winners {\n  left: 50%;\n}\n\n/**/\n\n@media all and (max-width: 720px) {\n  .header__container {\n    flex-direction: column;\n    gap: 20px;\n  }\n\n  .header__buttons {\n    width: 100%;\n  }\n}\n\n@media all and (max-width: 550px) {\n  .header__container {\n    padding-top: 20px;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/header.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,8BAA8B;EAC9B,eAAe;EACf,OAAO;EACP,MAAM;EACN,aAAa;AACf;;AAEA;EACE,WAAW;EACX,4BAA4B;EAC5B,aAAa;EACb,8BAA8B;EAC9B,SAAS;AACX;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,mBAAmB;;EAEnB,eAAe;EACf,4BAA4B;AAC9B;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,cAAc;EACd,UAAU;EACV,YAAY;EACZ,mBAAmB;EACnB,8BAA8B;;EAE9B,kBAAkB;EAClB,MAAM;EACN,OAAO;;EAEP,gCAAgC;AAClC;;AAEA;EACE,SAAS;AACX;;AAEA,GAAG;;AAEH;EACE;IACE,sBAAsB;IACtB,SAAS;EACX;;EAEA;IACE,WAAW;EACb;AACF;;AAEA;EACE;IACE,iBAAiB;EACnB;AACF",sourcesContent:[".header {\n  width: 100%;\n  background-color: var(--black);\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 1000;\n}\n\n.header__container {\n  width: 100%;\n  padding: var(--page-padding);\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n.header__buttons {\n  display: flex;\n  position: relative;\n  border-radius: 60px;\n\n  cursor: pointer;\n  transition: all 0.2s ease-in;\n}\n\n.header__buttons:hover {\n  background-color: var(--black-light);\n}\n\n.bubble {\n  display: block;\n  width: 50%;\n  height: 60px;\n  border-radius: 60px;\n  background-color: var(--white);\n\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  transition: all 0.2s ease-in-out;\n}\n\n.bubble.winners {\n  left: 50%;\n}\n\n/**/\n\n@media all and (max-width: 720px) {\n  .header__container {\n    flex-direction: column;\n    gap: 20px;\n  }\n\n  .header__buttons {\n    width: 100%;\n  }\n}\n\n@media all and (max-width: 550px) {\n  .header__container {\n    padding-top: 20px;\n  }\n}\n"],sourceRoot:""}]);const A=i},3771:(n,e,t)=>{t.d(e,{Z:()=>b});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r),A=t(8772),s=t(7179),c=t(4127),l=t(1076),d=t(1645),p=t(5939),u=t(7394),g=t(3497),E=t(8756),f=t(7348),C=t(1574),m=i()(o());m.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@300;400;500;600;700&display=swap);"]),m.i(A.Z),m.i(s.Z),m.i(c.Z),m.i(l.Z),m.i(d.Z),m.i(p.Z),m.i(u.Z),m.i(g.Z),m.i(E.Z),m.i(f.Z),m.i(C.Z),m.push([n.id,"\n","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const b=m},8756:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r)()(o());i.push([n.id,".main {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n\n  margin-top: 120px;\n}\n\n.main__container {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  padding: 40px var(--page-padding);\n}\n\n/* HEADER */\n\n.view__header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 15px;\n  margin-bottom: 20px;\n}\n\n.view__title {\n  display: flex;\n  gap: 5px;\n}\n\n.view__title span {\n  text-align: right;\n}\n\n.view__title h2,\n.view__title span {\n  font-size: 40px;\n  font-weight: 400;\n}\n\n.view__buttons {\n  display: flex;\n  gap: 5px;\n  margin-top: 5px;\n}\n\n.view__buttons.hidden {\n  visibility: hidden;\n  opacity: 0;\n}\n\n@media all and (max-width: 720px) {\n  .main {\n    margin-top: 180px;\n  }\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,YAAY;;EAEZ,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,YAAY;EACZ,iCAAiC;AACnC;;AAEA,WAAW;;AAEX;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,QAAQ;AACV;;AAEA;EACE,iBAAiB;AACnB;;AAEA;;EAEE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,QAAQ;EACR,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE;IACE,iBAAiB;EACnB;AACF",sourcesContent:[".main {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n\n  margin-top: 120px;\n}\n\n.main__container {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  padding: 40px var(--page-padding);\n}\n\n/* HEADER */\n\n.view__header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 15px;\n  margin-bottom: 20px;\n}\n\n.view__title {\n  display: flex;\n  gap: 5px;\n}\n\n.view__title span {\n  text-align: right;\n}\n\n.view__title h2,\n.view__title span {\n  font-size: 40px;\n  font-weight: 400;\n}\n\n.view__buttons {\n  display: flex;\n  gap: 5px;\n  margin-top: 5px;\n}\n\n.view__buttons.hidden {\n  visibility: hidden;\n  opacity: 0;\n}\n\n@media all and (max-width: 720px) {\n  .main {\n    margin-top: 180px;\n  }\n}"],sourceRoot:""}]);const A=i},1574:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r)()(o());i.push([n.id,".popup {\n  position: absolute;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n\n  padding: 20px;\n  background-color: rgba(28, 28, 28, 0.5);\n\n  transform: translateY(-100%);\n  transition: transform 0.5s ease-in;\n}\n\n.popup--open {\n  transform: translateY(0);\n}\n\n.popup__container {\n  max-width: 520px;\n  width: 100%;\n  height: 200px;\n  background-color: var(--black-light);\n  box-shadow: 10px 10px 10px var(--shadow);\n  border-radius: 40px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.popup__content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.popup__content span {\n  font-size: 24px;\n  user-select: none;\n}\n\n/**/\n\n@media all and (max-width: 550px) {\n  .popup {\n    padding: 15px;\n  }\n}","",{version:3,sources:["webpack://./src/styles/popup.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,OAAO;EACP,YAAY;EACZ,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;;EAEb,aAAa;EACb,uCAAuC;;EAEvC,4BAA4B;EAC5B,kCAAkC;AACpC;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,aAAa;EACb,oCAAoC;EACpC,wCAAwC;EACxC,mBAAmB;;EAEnB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA,GAAG;;AAEH;EACE;IACE,aAAa;EACf;AACF",sourcesContent:[".popup {\n  position: absolute;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n\n  padding: 20px;\n  background-color: rgba(28, 28, 28, 0.5);\n\n  transform: translateY(-100%);\n  transition: transform 0.5s ease-in;\n}\n\n.popup--open {\n  transform: translateY(0);\n}\n\n.popup__container {\n  max-width: 520px;\n  width: 100%;\n  height: 200px;\n  background-color: var(--black-light);\n  box-shadow: 10px 10px 10px var(--shadow);\n  border-radius: 40px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.popup__content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.popup__content span {\n  font-size: 24px;\n  user-select: none;\n}\n\n/**/\n\n@media all and (max-width: 550px) {\n  .popup {\n    padding: 15px;\n  }\n}"],sourceRoot:""}]);const A=i},8772:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r)()(o());i.push([n.id,'* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  font-size: 14px;\n  color: var(--white);\n}\n\nbody {\n  width: 100%;\n  min-height: 100vh;\n  height: 100%;\n  background: var(--black);\n  font-family: "Inter", "Arial", sans-serif;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n\n  overflow-x: hidden;\n}\n\n.content-width {\n  width: 100%;\n}\n\na {\n  text-decoration: none;\n  color: var(--white);\n  opacity: 0.6;\n\n  transition: all 0.2s ease-in;\n}\n\na:hover {\n  opacity: 1;\n}\n\n/**/\n\n@media all and (max-width: 980px) {\n}\n\n\n',"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;EACtB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,YAAY;EACZ,wBAAwB;EACxB,yCAAyC;;EAEzC,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,mBAAmB;;EAEnB,kBAAkB;AACpB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,qBAAqB;EACrB,mBAAmB;EACnB,YAAY;;EAEZ,4BAA4B;AAC9B;;AAEA;EACE,UAAU;AACZ;;AAEA,GAAG;;AAEH;AACA",sourcesContent:['* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  font-size: 14px;\n  color: var(--white);\n}\n\nbody {\n  width: 100%;\n  min-height: 100vh;\n  height: 100%;\n  background: var(--black);\n  font-family: "Inter", "Arial", sans-serif;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n\n  overflow-x: hidden;\n}\n\n.content-width {\n  width: 100%;\n}\n\na {\n  text-decoration: none;\n  color: var(--white);\n  opacity: 0.6;\n\n  transition: all 0.2s ease-in;\n}\n\na:hover {\n  opacity: 1;\n}\n\n/**/\n\n@media all and (max-width: 980px) {\n}\n\n\n'],sourceRoot:""}]);const A=i},7179:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(4015),o=t.n(a),r=t(3645),i=t.n(r)()(o());i.push([n.id,':root {\n  --black: #1C1C1C;\n  --white: whitesmoke;\n  --green: #6BD856;\n  --shadow: #131313;\n\n  --page-padding: 20px;\n  --font: "Inter", "Arial", sans-serif;\n\n  /* BUTTONS */\n  --button-font-size: 12px;\n  --black-light: #303030;\n  --button-hover-white: #dbdbdb;\n  --button-hover-primary: #4aaa37;\n  --track-button-color: #858585;\n\n  /*INPUTS*/\n  --input-border: #919191;\n}\n\n@media all and (max-width: 550px) {\n  :root {\n    --page-padding: 15px;\n  }\n}',"",{version:3,sources:["webpack://./src/styles/variables.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,gBAAgB;EAChB,iBAAiB;;EAEjB,oBAAoB;EACpB,oCAAoC;;EAEpC,YAAY;EACZ,wBAAwB;EACxB,sBAAsB;EACtB,6BAA6B;EAC7B,+BAA+B;EAC/B,6BAA6B;;EAE7B,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE;IACE,oBAAoB;EACtB;AACF",sourcesContent:[':root {\n  --black: #1C1C1C;\n  --white: whitesmoke;\n  --green: #6BD856;\n  --shadow: #131313;\n\n  --page-padding: 20px;\n  --font: "Inter", "Arial", sans-serif;\n\n  /* BUTTONS */\n  --button-font-size: 12px;\n  --black-light: #303030;\n  --button-hover-white: #dbdbdb;\n  --button-hover-primary: #4aaa37;\n  --track-button-color: #858585;\n\n  /*INPUTS*/\n  --input-border: #919191;\n}\n\n@media all and (max-width: 550px) {\n  :root {\n    --page-padding: 15px;\n  }\n}'],sourceRoot:""}]);const A=i},3645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,a){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(a)for(var r=0;r<this.length;r++){var i=this[r][0];null!=i&&(o[i]=!0)}for(var A=0;A<n.length;A++){var s=[].concat(n[A]);a&&o[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s))}},e}},4015:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,a=new Array(e);t<e;t++)a[t]=n[t];return a}n.exports=function(n){var t,a,o=(a=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var a,o,r=[],i=!0,A=!1;try{for(t=t.call(n);!(i=(a=t.next()).done)&&(r.push(a.value),!e||r.length!==e);i=!0);}catch(n){A=!0,o=n}finally{try{i||null==t.return||t.return()}finally{if(A)throw o}}return r}}(t,a)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var a=Object.prototype.toString.call(n).slice(8,-1);return"Object"===a&&n.constructor&&(a=n.constructor.name),"Map"===a||"Set"===a?Array.from(n):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?e(n,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],i=o[3];if(!i)return r;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),c="/*# ".concat(s," */"),l=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[r].concat(l).concat([c]).join("\n")}return[r].join("\n")}},1667:n=>{n.exports=function(n,e){return e||(e={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},4643:(n,e,t)=>{t.r(e),t.d(e,{default:()=>i});var a=t(3379),o=t.n(a),r=t(3771);o()(r.Z,{insert:"head",singleton:!1});const i=r.Z.locals||{}},3379:(n,e,t)=>{var a,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),r=[];function i(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function A(n,e){for(var t={},a=[],o=0;o<n.length;o++){var A=n[o],s=e.base?A[0]+e.base:A[0],c=t[s]||0,l="".concat(s," ").concat(c);t[s]=c+1;var d=i(l),p={css:A[1],media:A[2],sourceMap:A[3]};-1!==d?(r[d].references++,r[d].updater(p)):r.push({identifier:l,updater:E(p,e),references:1}),a.push(l)}return a}function s(n){var e=document.createElement("style"),a=n.attributes||{};if(void 0===a.nonce){var r=t.nc;r&&(a.nonce=r)}if(Object.keys(a).forEach((function(n){e.setAttribute(n,a[n])})),"function"==typeof n.insert)n.insert(e);else{var i=o(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var c,l=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function d(n,e,t,a){var o=t?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var r=document.createTextNode(o),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(r,i[e]):n.appendChild(r)}}function p(n,e,t){var a=t.css,o=t.media,r=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleSheet)n.styleSheet.cssText=a;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(a))}}var u=null,g=0;function E(n,e){var t,a,o;if(e.singleton){var r=g++;t=u||(u=s(e)),a=d.bind(null,t,r,!1),o=d.bind(null,t,r,!0)}else t=s(e),a=p.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return a(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;a(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a));var t=A(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var a=0;a<t.length;a++){var o=i(t[a]);r[o].references--}for(var s=A(n,e),c=0;c<t.length;c++){var l=i(t[c]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}t=s}}}},7840:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.WINNERS_LIMIT=e.GARAGE_LIMIT=e.ENGINE_URL=e.WINNERS_URL=e.GARAGE_URL=e.URL=void 0,e.URL="http://127.0.0.1:3000",e.GARAGE_URL=`${e.URL}/garage`,e.WINNERS_URL=`${e.URL}/winners`,e.ENGINE_URL=`${e.URL}/engine`,e.GARAGE_LIMIT=7,e.WINNERS_LIMIT=10},737:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createCarAPI=void 0;const a=t(7840);e.createCarAPI=async function(n){const e=await fetch(`${a.GARAGE_URL}`,{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json"}});return await e.json()}},893:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.deleteCarAPI=void 0;const a=t(7840);e.deleteCarAPI=async function(n){await fetch(`${a.GARAGE_URL}/${n}`,{method:"DELETE"}).then((n=>n.json()))}},7052:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.driveCarAPI=e.stopCarAPI=e.startCarAPI=void 0;const a=t(7840);e.startCarAPI=async function(n){const e=await fetch(`${a.ENGINE_URL}?id=${n}&status=started`,{method:"PATCH"});return await e.json()},e.stopCarAPI=async function(n){const e=await fetch(`${a.ENGINE_URL}?id=${n}&status=stopped`,{method:"PATCH"});return await e.json()},e.driveCarAPI=async function(n){const e=await fetch(`${a.ENGINE_URL}?id=${n}&status=drive`,{method:"PATCH"});return 200!==e.status?{success:!1}:{...await e.json()}}},7815:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getCarAPI=e.getCarsAPI=void 0;const a=t(7840);e.getCarsAPI=async function(n=1){const e=await fetch(`${a.GARAGE_URL}?_page=${n}&_limit=${a.GARAGE_LIMIT}`),t=await e.json(),o=e.headers.get("X-Total-Count");if(!o)throw Error("Couldn't get data from X-Total-Count header.");return{items:t,count:o}},e.getCarAPI=async function(n){const e=await fetch(`${a.GARAGE_URL}/${n}`);return await e.json()}},7437:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.updateCarAPI=void 0;const a=t(7840);e.updateCarAPI=async function(n,e){const t=await fetch(`${a.GARAGE_URL}/${n}`,{method:"PUT",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}});return await t.json()}},1769:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.renderApp=void 0;const a=t(3008),o=t(6447),r=t(7311),i=t(3518);e.renderApp=function(){const n=(0,a.createHeader)(),e=(0,r.createMain)(),t=(0,o.createFooter)(),A=(0,i.createWinPopup)();document.body.append(n,e,t,A)}},6447:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createFooter=void 0;const a=t(6479);e.createFooter=function(){const n=(0,a.createElement)("footer",[".footer"]),e=(0,a.createElement)("footer",[".footer__container"]),t=(0,a.createElement)("div",[".footer__info"]),o=(0,a.createElement)("div",[".footer__info"]),r=(0,a.createElement)("span",[],"Async Race,"),i=(0,a.createLink)("RS School (2023)","https://rs.school/"),A=(0,a.createLink)("Here East","https://github.com/HereEast");return t.append(r,i),o.append(A),e.append(t,o),n.append(e),n}},1706:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createBasicForm=void 0;const a=t(6479);e.createBasicForm=function(n){const e=(0,a.createElement)("div",[".form__container"]),t=(0,a.createInput)("text",n);t.placeholder="Car name...";const o=(0,a.createInput)("color",n);o.value="#f6b73c";const r=(0,a.createButton)(n,[`.button__${n}`]);return e.append(t,o,r),e}},7163:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createHeaderForms=e.createUpdateForm=e.createCreateForm=void 0;const a=t(6479),o=t(1706);function r(){const n=(0,a.createElement)("form",[".form__create"]),e=(0,o.createBasicForm)("create"),t=(0,a.createButton)("generate",[".button__generate"]);t.textContent="Generate Cars";const r=(0,a.createElement)("span");return n.append(e,r,t),n}function i(){const n=(0,a.createElement)("form",[".form__update"]),e=(0,o.createBasicForm)("update"),t=(0,a.createButton)("cancel",[".button__cancel"]),r=(0,a.createElement)("h2",[],"Edit car ⚙️");return e.append(t),n.append(r,e),n}e.createCreateForm=r,e.createUpdateForm=i,e.createHeaderForms=function(){const n=(0,a.createElement)("div",[".forms__container"]),e=r(),t=i();return n.append(e,t),n}},3008:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createHeader=void 0;const a=t(6479),o=t(8021),r=t(7163);e.createHeader=function(){const n=(0,a.createElement)("header",[".header"]),e=(0,a.createElement)("div",[".header__container"]),t=(0,o.createHeaderButtons)(),i=(0,r.createHeaderForms)();return e.append(t,i),n.append(e),n}},8021:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createHeaderButtons=void 0;const a=t(6479);e.createHeaderButtons=function(){const n=(0,a.createElement)("div",[".header__buttons"]),e=(0,a.createElement)("span",[".bubble"]),t=(0,a.createButton)("garage",[".button__view"]),o=(0,a.createButton)("winners",[".button__view"]);return n.append(e,t,o),n}},7311:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createMain=void 0;const a=t(6479),o=t(2203),r=t(471);e.createMain=function(){const n=(0,a.createElement)("main",[".main"]),e=(0,a.createElement)("div",[".main__container"]),t=(0,o.createPageHeader)(),i=(0,a.createElement)("div",[".view__body"]),A=(0,r.createPagination)();return e.append(t,i,A),n.append(e),n}},4403:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createCountElement=void 0;const a=t(6479);e.createCountElement=function(n=0){const e=(0,a.createElement)("div",[".view__count"]),t=(0,a.createElement)("span",[],"("),o=(0,a.createElement)("span",[],")"),r=(0,a.createElement)("span",[".count"],String(n));return e.append(t,r,o),e}},9751:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createGarageButtons=void 0;const a=t(6479);e.createGarageButtons=function(){const n=(0,a.createElement)("div",[".view__buttons"]),e=(0,a.createButton)("race",[".button__race"]),t=(0,a.createButton)("reset",[".button__reset"]);return n.append(e,t),n}},2203:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createPageHeader=void 0;const a=t(6479),o=t(4403),r=t(9751);e.createPageHeader=function(){const n=(0,a.createElement)("div",[".view__header"]),e=(0,a.createElement)("div",[".view__title"]),t=(0,a.createElement)("h2",[".title"],""),i=(0,o.createCountElement)(),A=(0,r.createGarageButtons)();return e.append(t,i),n.append(e,A),n}},471:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createPagination=void 0;const a=t(6479);e.createPagination=function(){const n=(0,a.createElement)("div",[".pagination"]),e=(0,a.createElement)("div",[".page__container"]),t=(0,a.createElement)("span",[],"Page"),o=(0,a.createElement)("span",[".page--current"],"1"),r=(0,a.createElement)("span",[],"of"),i=(0,a.createElement)("span",[".page--total"],""),A=(0,a.createElement)("div",[".pages__buttons"]),s=(0,a.createButton)("prev",[".button__prev",".button__page"]),c=(0,a.createButton)("next",[".button__next",".button__page"]);return A.append(s,c),e.append(t,o,r,i),n.append(e,A),n}},3518:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createWinPopup=void 0;const a=t(6479);e.createWinPopup=function(){const n=(0,a.createElement)("div",[".popup"]),e=(0,a.createElement)("div",[".popup__container"]),t=(0,a.createElement)("div",[".popup__content"]),o=(0,a.createElement)("span",[".popup__winner"],"Winner"),r=(0,a.createElement)("span",[".popup__message"],"won the race in "),i=(0,a.createElement)("span",[".popup__time"],"2.345 sec");return r.append(i),t.append(o,r),e.append(t),n.append(e),n}},4652:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.initListeners=void 0;const a=t(3834),o=t(5751),r=t(9802),i=t(4763),A=t(61),s=t(8986),c=t(7833),l=t(8063),d=t(4306),p=t(4204),u=t(3468);e.initListeners=function(){const n=(0,a.getElement)("#button__garage"),e=(0,a.getElement)("#button__winners"),t=(0,a.getElement)(".button__create"),g=(0,a.getElement)(".button__cancel"),E=(0,a.getElement)(".button__update"),f=(0,a.getElement)(".button__generate"),C=(0,a.getElement)(".button__prev"),m=(0,a.getElement)(".button__next"),b=(0,a.getElement)(".button__reset"),h=(0,a.getElement)(".button__race");document.addEventListener("click",c.hideUpdateForm),n.addEventListener("click",o.renderGarageView),e.addEventListener("click",r.renderWinnersView),t.addEventListener("click",i.handleCreateCar),g.addEventListener("click",A.cancelUpdate),E.addEventListener("click",s.handleUpdate),f.addEventListener("click",l.handleGenerate),C.addEventListener("click",d.handlePagination),m.addEventListener("click",d.handlePagination),b.addEventListener("click",p.handleReset),h.addEventListener("click",u.handleRace)}},6479:(n,e)=>{function t(n,e,t){const a=document.createElement(n);if(!(a instanceof HTMLElement))throw Error(`Couldn't create HTML element ${n}`);if(e?.length){const n=e.map((n=>n.slice(1)));a.classList.add(...n)}return t&&(a.textContent=t),a}Object.defineProperty(e,"__esModule",{value:!0}),e.createSVG=e.createLink=e.createInput=e.createButton=e.createElement=void 0,e.createElement=t,e.createButton=function(n,e){const a=t("button",e,n);if(!(a instanceof HTMLButtonElement))throw Error(`Couldn't create button ${n}`);if(e&&!e.includes(".button__track")){const e=`button__${n.toLowerCase()}`;a.id=e}return a},e.createInput=function(n,e){const a=t("input",[`.input-${n}`]);if(!(a instanceof HTMLInputElement))throw Error("Failed to create HTMLInput Element...");return a.id=`input-${n}__${e}`,a.type=n,a.autocomplete="off",a},e.createLink=function(n,e,a){const o=t("a",a,n);if(!(o instanceof HTMLAnchorElement))throw Error("Failed to create a <a> element...");return o.href=e,o},e.createSVG=function(n){const e=t("div",[n.divClass]),a=document.createElementNS(n.ns,"svg");return a.setAttribute("width",n.width),a.setAttribute("height",n.height),n.color&&a instanceof SVGElement&&(a.style.backgroundColor=n.color),e.append(a),e}},3834:(n,e)=>{function t(n){const e=document.querySelector(n);if(!(e&&e instanceof HTMLElement))throw Error(`${n} is not found...`);return e}Object.defineProperty(e,"__esModule",{value:!0}),e.getFormInputs=e.getElementsArray=e.getElement=e.getClosest=e.getTarget=void 0,e.getTarget=function(n){const e=n.target;if(!e)throw Error("Target element is not found...");if(!(e instanceof HTMLElement))throw Error("Target is not an HTMLElement...");return e},e.getClosest=function(n,e){const t=n.closest(e);if(!(t&&t instanceof HTMLElement))throw Error(`${e} element is not found...`);return t},e.getElement=t,e.getElementsArray=function(n){const e=Array.from(document.querySelectorAll(n));if(!e)throw Error(`${n} elements are not found...`);return e.forEach((n=>{if(!(n instanceof HTMLElement))throw Error("Elements are not an array of HTMLElement...")})),e},e.getFormInputs=function(n){const e=t(`${n} .input-text`),a=t(`${n} .input-color`);if(!(e instanceof HTMLInputElement))throw Error("Text input isn't found.");if(!(a instanceof HTMLInputElement))throw Error("Color input isn't found.");return{inputText:e,inputColor:a}}},6586:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getTargetID=void 0;const a=t(3834);e.getTargetID=function(n){const e=(0,a.getTarget)(n),t=(0,a.getClosest)(e,".track").id.split("--").at(-1);if(!t)throw Error("Couldn't get car's ID...");return t}},7073:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.toggleDisable=e.getRandomIndex=e.cleanContent=void 0;const a=t(3834);e.cleanContent=function(n){[...(n||(0,a.getElement)(".view__body")).children].forEach((n=>{n.remove()}))},e.getRandomIndex=function(n){return Math.floor(Math.random()*n.length)},e.toggleDisable=function(n){const e=n;e instanceof HTMLButtonElement&&(e.disabled=!e.disabled)}},947:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isEnoughSpace=e.isLastPage=e.isFirstPage=e.getCurrentPage=e.isLastTrack=void 0;const a=t(3834),o=t(7840);function r(n){const e=localStorage.getItem(`${n}-page`)||1;return Number(e)}e.isLastTrack=function(){return 1===(0,a.getElementsArray)(".track").length},e.getCurrentPage=r,e.isFirstPage=function(n){return 1===r(n)},e.isLastPage=function(n){return localStorage.getItem(`${n}-page`)===localStorage.getItem("totalPages")},e.isEnoughSpace=function(){return(0,a.getElementsArray)(".track").length<o.GARAGE_LIMIT}},5914:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getCurrentView=e.saveCurrentView=void 0,e.saveCurrentView=function(n="garage"){document.body.className="",document.body.classList.add(n),localStorage.setItem("view",n)},e.getCurrentView=function(){return window.localStorage.getItem("view")??""}},8155:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getTotalCars=e.updateTotalCars=e.setTotalCars=void 0;const a=t(3834);e.setTotalCars=function(n){(0,a.getElement)(".count").textContent=String(n),localStorage.setItem("totalCars",String(n))},e.updateTotalCars=function(n){const e=(0,a.getElement)(".count"),t=`${Number(e.textContent)+n}`;e.textContent=t,localStorage.setItem("totalCars",t)},e.getTotalCars=function(){const n=localStorage.getItem("totalCount")||1;return Number(n)}},586:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.toggleViewButton=void 0;const a=t(3834);e.toggleViewButton=function(n){const e=(0,a.getElement)(".bubble"),t=(0,a.getElementsArray)(".button__view");t.forEach((n=>n.classList.remove("active")));const o=t.find((e=>e.id===`button__${n}`));if(!o)throw Error("Couldn't find a View Button.");o.classList.add("active"),o.textContent?.includes("garage")?e.classList.remove("winners"):e.classList.add("winners")}},2612:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.toggleUIElements=e.togglePageTittle=e.toggleFormsDisplay=void 0;const a=t(3834),o=t(586);function r(n){const e=(0,a.getElement)(".forms__container");"garage"===n?e.classList.remove(".forms--hidden".slice(1)):e.classList.add(".forms--hidden".slice(1))}function i(n,e=0){(0,a.getElement)(".title").textContent=`${n[0].toUpperCase()}${n.slice(1)}`,(0,a.getElement)(".count").textContent=String(e);const t=(0,a.getElement)(".view__buttons");"winners"===n?t.classList.add("hidden"):t.classList.remove("hidden")}e.toggleFormsDisplay=r,e.togglePageTittle=i,e.toggleUIElements=function(n){(0,o.toggleViewButton)(n),r(n),i(n)}},4763:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.handleCreateCar=void 0;const a=t(3834),o=t(737),r=t(6232),i=t(8155),A=t(5568),s=t(947),c=t(2668);e.handleCreateCar=async function(n){n.preventDefault();const{inputText:e,inputColor:t}=(0,a.getFormInputs)(".form__create"),l=e.value,d=t.value;if(!l)return void e.focus();const p=await(0,o.createCarAPI)({name:l,color:d});(0,s.isLastPage)("garage")&&(0,s.isEnoughSpace)()&&(0,A.appendTrack)(p),(0,i.updateTotalCars)(1),(0,r.setTotalPages)(),(0,c.togglePageButtons)(),e.value="",console.log("Create:",localStorage)}},7300:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.carMakes=void 0,e.carMakes=[{make:"BMW",models:["M3","M5","M5 CS","i4 M50 xDrive","X6 M","M8 Competition","Z4 M40i"]},{make:"Porsche",models:["Sally Special","Cayman S","Cayman Spyder RS","Carrera","Carrera 4S","Carrera GTS","911 Turbo","Taycan GTS","Panamera 4S","Cayenne Turbo GT"]},{make:"Mercedes",models:["SL 63 Roadster","GLE 53 Coupe","CLA 35 Coupe","GT 43 Coupe","AMG One","S-Class","CLS"]},{make:"Dodge",models:["Charger R/T","Challenger SRT-8","Charger Hellacious"]},{make:"Ferrari",models:["GTS","SF90 Spider","Roma"]},{make:"Lamborghini",models:["Auténtica","SC20 Roadster","Urus Performante","Huracán","Revuelto"]},{make:"Bugatti",models:["Chiron Profilée","Chiron","Mistral","Centodieci","Veyron","EB110 SS"]},{make:"McLaren",models:["X-1","MSO R","GT","600LT","750S","765LT","Artura"]},{make:"Jaguar",models:["F-Type R75","XF","I-Pace"]},{make:"Maserati",models:["Ghibli GT","MC20"]},{make:"Aston Martin",models:["Victor","Vantage GT12","V8 Vantage","DBS Volante"]},{make:"Ford",models:["F-150 Raptor","Mustang","Bronco Raptor"]}]},8063:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.handleGenerate=e.generateCars=void 0;const a=t(737),o=t(3340),r=t(9956),i=t(5751),A=t(947),s=t(6232),c=t(8155);async function l(n){if(n>0){const e=(0,r.getRandomMake)(),t=(0,o.getRandomColor)();await(0,a.createCarAPI)({name:e,color:t}),await l(n-1)}}e.generateCars=l,e.handleGenerate=async function(n){if(n.preventDefault(),await l(2),(0,A.isEnoughSpace)()){const n=(0,A.getCurrentPage)("garage");await(0,i.updateGarage)(n)}(0,c.updateTotalCars)(2),(0,s.setTotalPages)(),console.log("Generate:",localStorage)}},3340:(n,e)=>{function t(){return Math.ceil(255*Math.random()).toString(16).padStart(2,"0")}Object.defineProperty(e,"__esModule",{value:!0}),e.getRandomColor=e.getColorValue=void 0,e.getColorValue=t,e.getRandomColor=function(){return`#${t()}${t()}${t()}`}},9956:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getRandomMake=void 0;const a=t(7300),o=t(7073);e.getRandomMake=function(){const n=(0,o.getRandomIndex)(a.carMakes),{make:e,models:t}=a.carMakes[n];return`${e} ${t[(0,o.getRandomIndex)(t)]}`}},4204:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.handleReset=void 0;const a=t(5675),o=t(2584);e.handleReset=function(n){n.preventDefault(),(0,o.getCarsIds)().forEach((n=>(0,a.stopCar)(Number(n)))),(0,o.disableStartButtons)(!1),(0,o.disableStopButtons)(!0),console.log("Reset")}},3468:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.handleRace=e.raceCars=void 0;const a=t(2584),o=t(5675);async function r(n){n.map((async n=>await(0,o.startAnimation)(n)))}e.raceCars=r,e.handleRace=async function(n){n.preventDefault();const e=(0,a.getCarsIds)();await r(e),console.log(e),console.log("Race")}},5675:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.handleStop=e.stopCar=e.handleStart=e.startAnimation=e.controlDrive=void 0;const a=t(6586),o=t(7052),r=t(3834),i=t(2584);let A,s={id:"",time:0};async function c(n,e){const{success:t}=await(0,o.driveCarAPI)(Number(n));return t?s.id||(s={id:n,time:e},console.log("WINNER",s)):cancelAnimationFrame(A),t}async function l(n){const e=(0,r.getElement)(`#car--${n}`),t=await(0,i.getDriveTime)(n),a=(0,i.getDistance)()-40,o=t/1e3*60;let s=e.offsetLeft;const l=(a-s)/o;!function n(){s+=l,e.style.transform=`translate(${s}px)`,s<=a&&(A=requestAnimationFrame(n))}(),await c(n,t)}async function d(n){cancelAnimationFrame(A);const e=(0,r.getElement)(`#car--${n}`);e.style.transform="translate(0px)",await(0,o.stopCarAPI)(n),e.classList.remove(".car--driving".slice(1))}e.controlDrive=c,e.startAnimation=l,e.handleStart=async function(n){const e=(0,a.getTargetID)(n),t=(0,r.getElement)(`#car--${e}`);t.classList.contains(".car--driving".slice(1))||(t.classList.add(".car--driving".slice(1)),l(e),(0,i.toggleControls)(n))},e.stopCar=d,e.handleStop=async function(n){d(Number((0,a.getTargetID)(n))),(0,i.toggleControls)(n)}},2584:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.disableStartButtons=e.disableStopButtons=e.getCarsIds=e.toggleControls=e.getSiblingButton=e.getDistance=e.getDriveTime=void 0;const a=t(7052),o=t(3834),r=t(7073);function i(n){const e=n.classList.contains(".button__stop".slice(1))?n.previousElementSibling:n.nextElementSibling;if(!(e instanceof HTMLButtonElement))throw Error("Couldn't find a sibling button...");return e}e.getDriveTime=async function(n){const e=await(0,a.startCarAPI)(Number(n));return e.distance/e.velocity},e.getDistance=function(){const n=document.body.clientWidth;return n-(n>550?40:30)},e.getSiblingButton=i,e.toggleControls=function(n){const e=(0,o.getTarget)(n),t=i(e);(0,r.toggleDisable)(e),(0,r.toggleDisable)(t)},e.getCarsIds=function(){const n=[...(0,o.getElementsArray)(".track")].map((n=>n.id.split("--").at(-1)||""));if(!n.length)throw Error("Can't get current cars' ids.");return n},e.disableStopButtons=function(n){[...(0,o.getElementsArray)(".button__stop")].forEach((e=>{e instanceof HTMLButtonElement&&(e.disabled=n)}))},e.disableStartButtons=function(n){[...(0,o.getElementsArray)(".button__start")].forEach((e=>{e instanceof HTMLButtonElement&&(e.disabled=n)}))}},5689:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getSelectedCar=void 0,e.getSelectedCar=function(){const n=localStorage.getItem("editItem");if(!n)throw Error("Couldn't get 'editItem' from Local Storage.");return JSON.parse(n)}},7833:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.hideUpdateForm=e.showUpdateForm=e.setUpdateInputs=void 0;const a=t(3834);function o(n){const{inputText:e,inputColor:t}=(0,a.getFormInputs)(".form__update");e.value=n.name,t.value=n.color}e.setUpdateInputs=o,e.showUpdateForm=function(n){o(n),console.log(n);const e=(0,a.getElement)(".form__update");e.classList.add(".form__update--open".slice(1)),e.dataset.editId=String(n.id)},e.hideUpdateForm=function(n){const e=(0,a.getTarget)(n);e.classList.contains("button__edit")||"BUTTON"===e.tagName&&(0,a.getElement)(".form__update").classList.remove(".form__update--open".slice(1))}},8986:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.handleUpdate=void 0;const a=t(3834),o=t(7833),r=t(7437),i=t(5626),A=t(5689);e.handleUpdate=async function(n){n.preventDefault();const{inputText:e,inputColor:t}=(0,a.getFormInputs)(".form__update"),s=(0,A.getSelectedCar)();if(!e.value.trim())return void e.focus();if(e.value===s.name&&t.value===s.color)return void(0,o.hideUpdateForm)(n);const c=s.id,l={name:e.value,color:t.value};await(0,r.updateCarAPI)(c,l),(0,i.updateCarUI)(c,l),(0,o.hideUpdateForm)(n)}},61:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.cancelUpdate=e.startUpdate=void 0;const a=t(6586),o=t(7815),r=t(7833);e.startUpdate=async function(n){const e=(0,a.getTargetID)(n),t=await(0,o.getCarAPI)(e);(0,r.showUpdateForm)(t),localStorage.setItem("editItem",JSON.stringify(t))},e.cancelUpdate=function(n){n.preventDefault(),(0,r.hideUpdateForm)(n),localStorage.setItem("editItem","")}},5626:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.updateCarUI=void 0,e.updateCarUI=function(n,e){const t=document.getElementById(`track--${n}`),a=t?.querySelector(`#car--${n} svg`),o=t?.querySelector(".car__name");if(!(a&&a instanceof SVGElement))throw Error("Couldn't get car SVG element.");if(!o)throw Error("Couldn't get a span with car name.");a.style.backgroundColor=e.color,o.textContent=e.name}},4306:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.handlePagination=void 0;const a=t(3834),o=t(947),r=t(5751);e.handlePagination=async function(n){const e=(0,a.getTarget)(n),t=e.id===".button__next".slice(1),i=e.id===".button__prev".slice(1);if(t&&(0,o.isLastPage)("garage"))return void console.log("Last page");if(i&&(0,o.isFirstPage)("garage"))return void console.log("First page");const A=(0,o.getCurrentPage)("garage"),s=t?A+1:A-1;await(0,r.updateGarage)(s)}},6232:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.updatePagination=e.setCurrentPage=e.setTotalPages=e.getTotalPages=void 0;const a=t(7840),o=t(3834);function r(){const n=Number(localStorage.getItem("totalCars"));return Math.ceil(n/a.GARAGE_LIMIT)}function i(){const n=(0,o.getElement)(".page--total"),e=String(r());n.textContent=e,localStorage.setItem("totalPages",e)}function A(n){const e=n||1;(0,o.getElement)(".page--current").textContent=String(e),localStorage.setItem("garage-page",String(e))}e.getTotalPages=r,e.setTotalPages=i,e.setCurrentPage=A,e.updatePagination=function(n){A(n),i()}},2668:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.togglePageButtons=void 0;const a=t(3834),o=t(947);e.togglePageButtons=function(){const n=(0,a.getElementsArray)(".button__page"),[e,t]=n,r=".button__page--disabled".slice(1);n.forEach((n=>n.classList.remove(r))),1===(0,o.getCurrentPage)("garage")&&e.classList.add(r),(0,o.isLastPage)("garage")&&t.classList.add(r)}},5751:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.renderGarageView=e.updateGarage=void 0;const a=t(7815),o=t(2612),r=t(947),i=t(6232),A=t(5914),s=t(8155),c=t(5568),l=t(2668);async function d(n){const e=await(0,a.getCarsAPI)(n);(0,c.appendTracks)(e),(0,s.setTotalCars)(e.count),(0,i.updatePagination)(n),(0,l.togglePageButtons)()}e.updateGarage=d,e.renderGarageView=async function(n){if(n&&"garage"===(0,A.getCurrentView)())return;(0,A.saveCurrentView)("garage"),(0,o.toggleUIElements)("garage");const e=(0,r.getCurrentPage)("garage");await d(e),console.log("Render:",localStorage),console.log("🙂 Garage View")}},5568:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.appendTracks=e.appendTrack=void 0;const a=t(3834),o=t(7073),r=t(3517);e.appendTrack=function(n){const e=(0,a.getElement)(".view__body"),t=(0,r.createTrack)(n);e.append(t)},e.appendTracks=function(n){const e=(0,a.getElement)(".view__body");return(0,o.cleanContent)(e),[...n.items].forEach((n=>{const t=(0,r.createTrack)(n);e.append(t)})),e}},3517:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createTrack=e.createTrackBody=e.createTrackHeader=void 0;const a=t(6479),o=t(2957),r="40px";function i(n){const e=(0,a.createElement)("div",[".track__header"]),t=(0,o.createTrackButtons)(),r=(0,a.createElement)("span",[".car__name"],n.name);return r.id=`${".car__name".slice(1)}--${n.id}`,e.append(t,r),e}function A(n){const e=(0,a.createElement)("div",[".track__body"]),t={divClass:".car",ns:"http://www.w3.org/2000/svg",width:r,height:r,color:n.color},o=(0,a.createSVG)(t);o.id=`car--${n.id}`;const i=(0,a.createElement)("div",[".flag"]);return e.append(o,i),e}e.createTrackHeader=i,e.createTrackBody=A,e.createTrack=function(n){const e=(0,a.createElement)("div",[".track"]);e.id=`track--${n.id}`;const t=(0,a.createElement)("div",[".track__container"]),o=i(n),r=A(n);return t.append(o,r),e.append(t),e}},2957:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createTrackButtons=e.handleDelete=void 0;const a=t(6479),o=t(893),r=t(5751),i=t(6586),A=t(61),s=t(947),c=t(5675);async function l(n){if(1===(0,s.getCurrentPage)("garage")&&(0,s.isLastTrack)())return;const e=(0,i.getTargetID)(n);await(0,o.deleteCarAPI)(e);const t=(0,s.getCurrentPage)("garage"),a=(0,s.isLastTrack)()?t-1:t;await(0,r.updateGarage)(a),console.log("Delete:",localStorage)}e.handleDelete=l,e.createTrackButtons=function(){const n=(0,a.createElement)("div",[".track__buttons"]),e=(0,a.createButton)("start",[".button__track",".button__start"]),t=(0,a.createButton)("stop",[".button__track",".button__stop"]),o=(0,a.createButton)("edit",[".button__track",".button__edit"]),r=(0,a.createButton)("delete",[".button__track",".button__delete"]);return o.addEventListener("click",A.startUpdate),r.addEventListener("click",l),e.addEventListener("click",c.handleStart),t.addEventListener("click",c.handleStop),t.disabled=!0,n.append(e,t,o,r),n}},9802:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.renderWinnersView=void 0;const a=t(7073),o=t(5914),r=t(2612);e.renderWinnersView=function(n){n&&"winners"===(0,o.getCurrentView)()||((0,a.cleanContent)(),(0,r.toggleUIElements)("winners"),(0,o.saveCurrentView)("winners"),console.log("🙂 Winner View"))}},6191:(n,e,t)=>{n.exports=t.p+"f184225b7b3184f4baf5.svg"},6140:(n,e,t)=>{n.exports=t.p+"fe22c9f7a75c10f13ff7.svg"},3233:(n,e,t)=>{n.exports=t.p+"69984fd172bcf5b02d1e.svg"}},e={};function t(a){var o=e[a];if(void 0!==o)return o.exports;var r=e[a]={id:a,exports:{}};return n[a](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var a=e.getElementsByTagName("script");if(a.length)for(var o=a.length-1;o>-1&&!n;)n=a[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{t(4643);const n=t(1769),e=t(4652),a=t(5751);(0,n.renderApp)(),(0,a.renderGarageView)(),alert("Привет!\nЕсли есть возможность, дай мне, пожалуйста, еще полтора дня, чтобы закончить задание. До вечера среды.\nБуду очень благодарна!\n(=^･ω･^=)"),window.addEventListener("DOMContentLoaded",(()=>{console.log("✅ DOM Loaded"),(0,e.initListeners)()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,